// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_haxe_crypto_Crc32
#include <haxe/crypto/Crc32.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_676618fd0ff08dad_32_new,"haxe.crypto.Crc32","new",0x50ecd2a0,"haxe.crypto.Crc32.new","C:\\HaxeToolkit\\haxe\\std/haxe/crypto/Crc32.hx",32,0x1de4b149)
HX_LOCAL_STACK_FRAME(_hx_pos_676618fd0ff08dad_35_byte,"haxe.crypto.Crc32","byte",0x766c14c8,"haxe.crypto.Crc32.byte","C:\\HaxeToolkit\\haxe\\std/haxe/crypto/Crc32.hx",35,0x1de4b149)
HX_LOCAL_STACK_FRAME(_hx_pos_676618fd0ff08dad_46_update,"haxe.crypto.Crc32","update",0x58c76bc9,"haxe.crypto.Crc32.update","C:\\HaxeToolkit\\haxe\\std/haxe/crypto/Crc32.hx",46,0x1de4b149)
HX_LOCAL_STACK_FRAME(_hx_pos_676618fd0ff08dad_61_get,"haxe.crypto.Crc32","get",0x50e782d6,"haxe.crypto.Crc32.get","C:\\HaxeToolkit\\haxe\\std/haxe/crypto/Crc32.hx",61,0x1de4b149)
namespace haxe{
namespace crypto{

void Crc32_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_676618fd0ff08dad_32_new)
HXDLIN(  32)		this->crc = (int)-1;
            	}

Dynamic Crc32_obj::__CreateEmpty() { return new Crc32_obj; }

void *Crc32_obj::_hx_vtable = 0;

Dynamic Crc32_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Crc32_obj > _hx_result = new Crc32_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Crc32_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x02755a4c;
}

void Crc32_obj::byte(int b){
            	HX_STACKFRAME(&_hx_pos_676618fd0ff08dad_35_byte)
HXLINE(  36)		int tmp = ((int)((int)this->crc ^ (int)b) & (int)(int)255);
HXLINE(  37)		{
HXLINE(  37)			int _g = (int)0;
HXDLIN(  37)			while((_g < (int)8)){
HXLINE(  37)				_g = (_g + (int)1);
HXDLIN(  37)				int j = (_g - (int)1);
HXLINE(  38)				if ((((int)tmp & (int)(int)1) == (int)1)) {
HXLINE(  39)					tmp = ((int)hx::UShr(tmp,(int)1) ^ (int)(int)-306674912);
            				}
            				else {
HXLINE(  41)					tmp = hx::UShr(tmp,(int)1);
            				}
            			}
            		}
HXLINE(  43)		this->crc = ((int)hx::UShr(this->crc,(int)8) ^ (int)tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Crc32_obj,byte,(void))

void Crc32_obj::update( ::haxe::io::Bytes b,int pos,int len){
            	HX_STACKFRAME(&_hx_pos_676618fd0ff08dad_46_update)
HXLINE(  47)		::Array< unsigned char > b1 = b->b;
HXLINE(  48)		{
HXLINE(  48)			int _g1 = pos;
HXDLIN(  48)			int _g = (pos + len);
HXDLIN(  48)			while((_g1 < _g)){
HXLINE(  48)				_g1 = (_g1 + (int)1);
HXDLIN(  48)				int i = (_g1 - (int)1);
HXLINE(  49)				int tmp = this->crc;
HXDLIN(  49)				int tmp1 = ((int)((int)tmp ^ (int)( (int)(_hx_array_unsafe_get(b1,i)) )) & (int)(int)255);
HXLINE(  50)				{
HXLINE(  50)					int _g2 = (int)0;
HXDLIN(  50)					while((_g2 < (int)8)){
HXLINE(  50)						_g2 = (_g2 + (int)1);
HXDLIN(  50)						int j = (_g2 - (int)1);
HXLINE(  51)						if ((((int)tmp1 & (int)(int)1) == (int)1)) {
HXLINE(  52)							tmp1 = ((int)hx::UShr(tmp1,(int)1) ^ (int)(int)-306674912);
            						}
            						else {
HXLINE(  54)							tmp1 = hx::UShr(tmp1,(int)1);
            						}
            					}
            				}
HXLINE(  56)				this->crc = ((int)hx::UShr(this->crc,(int)8) ^ (int)tmp1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Crc32_obj,update,(void))

int Crc32_obj::get(){
            	HX_STACKFRAME(&_hx_pos_676618fd0ff08dad_61_get)
HXDLIN(  61)		return ((int)this->crc ^ (int)(int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Crc32_obj,get,return )


hx::ObjectPtr< Crc32_obj > Crc32_obj::__new() {
	hx::ObjectPtr< Crc32_obj > __this = new Crc32_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Crc32_obj > Crc32_obj::__alloc(hx::Ctx *_hx_ctx) {
	Crc32_obj *__this = (Crc32_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Crc32_obj), false, "haxe.crypto.Crc32"));
	*(void **)__this = Crc32_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Crc32_obj::Crc32_obj()
{
}

hx::Val Crc32_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"crc") ) { return hx::Val( crc ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"byte") ) { return hx::Val( byte_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Crc32_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"crc") ) { crc=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Crc32_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("crc","\xd4","\x82","\x4b","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Crc32_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Crc32_obj,crc),HX_HCSTRING("crc","\xd4","\x82","\x4b","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Crc32_obj_sStaticStorageInfo = 0;
#endif

static ::String Crc32_obj_sMemberFields[] = {
	HX_HCSTRING("crc","\xd4","\x82","\x4b","\x00"),
	HX_HCSTRING("byte","\x08","\x1f","\x23","\x41"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void Crc32_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Crc32_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Crc32_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Crc32_obj::__mClass,"__mClass");
};

#endif

hx::Class Crc32_obj::__mClass;

void Crc32_obj::__register()
{
	hx::Object *dummy = new Crc32_obj;
	Crc32_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.crypto.Crc32","\xae","\x42","\xaf","\x0c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Crc32_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Crc32_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Crc32_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Crc32_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Crc32_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Crc32_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace crypto
