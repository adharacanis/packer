// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_MemoryUtils
#include <MemoryUtils.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4d7fa613290fc843_11_new,"MemoryUtils","new",0xa0f1ec42,"MemoryUtils.new","MemoryUtils.hx",11,0x93a9d16e)
HX_LOCAL_STACK_FRAME(_hx_pos_4d7fa613290fc843_16_toKBString,"MemoryUtils","toKBString",0xf83386a1,"MemoryUtils.toKBString","MemoryUtils.hx",16,0x93a9d16e)

void MemoryUtils_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4d7fa613290fc843_11_new)
            	}

Dynamic MemoryUtils_obj::__CreateEmpty() { return new MemoryUtils_obj; }

void *MemoryUtils_obj::_hx_vtable = 0;

Dynamic MemoryUtils_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MemoryUtils_obj > _hx_result = new MemoryUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MemoryUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61ba6350;
}

::String MemoryUtils_obj::toKBString(int bytes){
            	HX_STACKFRAME(&_hx_pos_4d7fa613290fc843_16_toKBString)
HXLINE(  17)		Float kb = ((Float)bytes / (Float)(int)1024);
HXLINE(  18)		::String kbString = ::Std_obj::string(kb);
HXLINE(  20)		int dotPosition = kbString.indexOf(HX_(".",2e,00,00,00),null());
HXLINE(  21)		int prec = (int)0;
HXLINE(  23)		if ((dotPosition != (int)-1)) {
HXLINE(  24)			int kbString1 = kbString.length;
HXDLIN(  24)			prec = (kbString1 - kbString.indexOf(HX_(".",2e,00,00,00),null()));
            		}
HXLINE(  26)		if ((prec > (int)2)) {
HXLINE(  27)			kbString = kbString.substr((int)0,(dotPosition + (int)3));
            		}
HXLINE(  29)		return ((HX_("",00,00,00,00) + kbString) + HX_(" KB",b7,89,18,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MemoryUtils_obj,toKBString,return )


MemoryUtils_obj::MemoryUtils_obj()
{
}

bool MemoryUtils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"toKBString") ) { outValue = toKBString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *MemoryUtils_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *MemoryUtils_obj_sStaticStorageInfo = 0;
#endif

static void MemoryUtils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MemoryUtils_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MemoryUtils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MemoryUtils_obj::__mClass,"__mClass");
};

#endif

hx::Class MemoryUtils_obj::__mClass;

static ::String MemoryUtils_obj_sStaticFields[] = {
	HX_HCSTRING("toKBString","\x43","\x82","\x7f","\x58"),
	::String(null())
};

void MemoryUtils_obj::__register()
{
	hx::Object *dummy = new MemoryUtils_obj;
	MemoryUtils_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("MemoryUtils","\x50","\x63","\xba","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MemoryUtils_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MemoryUtils_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MemoryUtils_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< MemoryUtils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MemoryUtils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MemoryUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MemoryUtils_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

