// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Console
#include <Console.h>
#endif
#ifndef INCLUDED_FileSystem
#include <FileSystem.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_converter_Converter
#include <converter/Converter.h>
#endif
#ifndef INCLUDED_mcli_CommandLine
#include <mcli/CommandLine.h>
#endif
#ifndef INCLUDED_mcli_Dispatch
#include <mcli/Dispatch.h>
#endif
#ifndef INCLUDED_mcli_internal_Kind
#include <mcli/internal/Kind.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_59_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",59,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_33_input,"Main","input",0x3a510a35,"Main.input","Main.hx",33,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_70_help,"Main","help",0xe9c31af6,"Main.help","Main.hx",70,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e0a1307868675923_1_getArguments,"Main","getArguments",0x24c88115,"Main.getArguments","?",1,0x0000003f)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_24_main,"Main","main",0xed0e206e,"Main.main","Main.hx",24,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e0a1307868675923_1_boot,"Main","boot",0xe5d36c67,"Main.boot","?",1,0x0000003f)
static const ::String _hx_array_data_332f6459_6[] = {
	HX_("out",8e,a0,54,00),
};
static const ::String _hx_array_data_332f6459_7[] = {
	HX_("in",e5,5b,00,00),
};

void Main_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_59_new)
HXLINE( 130)		this->silent = false;
HXLINE(  60)		{
HXLINE(  61)			super::__construct();
HXLINE(  62)			this->preventDefault();
            		}
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27f9cbe8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27f9cbe8;
	} else {
		return inClassId==(int)0x332f6459;
	}
}

void Main_obj::input(::String path){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_33_input)
HXLINE(  34)		if (hx::IsNull( this->output )) {
HXLINE(  35)			this->output = (path.substr((int)0,path.lastIndexOf(HX_(".",2e,00,00,00),null())) + HX_(".ppx",0a,2f,bd,1e));
            		}
HXLINE(  37)		::Console_obj::silent = this->silent;
HXLINE(  39)		int fileType = (path.lastIndexOf(HX_(".",2e,00,00,00),null()) + (int)1);
HXDLIN(  39)		::String fileType1 = path.substr(fileType,path.length);
HXLINE(  41)		 ::Dynamic data = null();
HXLINE(  43)		if ((fileType1.toLowerCase() == HX_("png",a9,5c,55,00))) {
HXLINE(  44)			data = ::FileSystem_obj::readPNG(path);
            		}
            		else {
HXLINE(  47)			::Console_obj::error(((HX_("format ",09,c1,2e,df) + fileType1) + HX_(" is not supported",4b,1e,c6,51)));
HXLINE(  48)			::Sys_obj::exit((int)1);
            		}
HXLINE(  51)		 ::Dynamic convertedData = ::converter::Converter_obj::convertTo4444(data);
HXLINE(  53)		::FileSystem_obj::savePPX(this->output,convertedData);
HXLINE(  54)		::FileSystem_obj::readPPX(this->output);
HXLINE(  56)		::Sys_obj::exit((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,input,(void))

void Main_obj::help(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_70_help)
HXDLIN(  70)		::Sys_obj::println(this->toString());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,help,(void))

::Array< ::Dynamic> Main_obj::getArguments(){
            	HX_STACKFRAME(&_hx_pos_e0a1307868675923_1_getArguments)
HXLINE( 289)		::Array< ::Dynamic> _hx_tmp = ::Main_obj::ARGUMENTS;
HXLINE(   1)		return _hx_tmp->concat(this->super::getArguments());
            	}


void Main_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_24_main)
HXDLIN(  24)		 ::mcli::Dispatch _hx_tmp =  ::mcli::Dispatch_obj::__alloc( HX_CTX ,::Sys_obj::args());
HXDLIN(  24)		_hx_tmp->dispatch( ::Main_obj::__alloc( HX_CTX ),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

::Array< ::Dynamic> Main_obj::ARGUMENTS;


hx::ObjectPtr< Main_obj > Main_obj::__new() {
	hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Main_obj > Main_obj::__alloc(hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(output,"output");
	HX_MARK_MEMBER_NAME(silent,"silent");
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(output,"output");
	HX_VISIT_MEMBER_NAME(silent,"silent");
}

hx::Val Main_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"help") ) { return hx::Val( help_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { return hx::Val( output ); }
		if (HX_FIELD_EQ(inName,"silent") ) { return hx::Val( silent ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getArguments") ) { return hx::Val( getArguments_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ARGUMENTS") ) { outValue = ( ARGUMENTS ); return true; }
	}
	return false;
}

hx::Val Main_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { output=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"silent") ) { silent=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"ARGUMENTS") ) { ARGUMENTS=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("output","\x01","\x0f","\x81","\x0c"));
	outFields->push(HX_HCSTRING("silent","\x95","\x76","\xcd","\xb7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Main_obj,output),HX_HCSTRING("output","\x01","\x0f","\x81","\x0c")},
	{hx::fsBool,(int)offsetof(Main_obj,silent),HX_HCSTRING("silent","\x95","\x76","\xcd","\xb7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Main_obj::ARGUMENTS,HX_HCSTRING("ARGUMENTS","\x36","\xaf","\xef","\xe9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_HCSTRING("output","\x01","\x0f","\x81","\x0c"),
	HX_HCSTRING("silent","\x95","\x76","\xcd","\xb7"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("help","\xc1","\x32","\x0b","\x45"),
	HX_HCSTRING("getArguments","\xe0","\xdb","\xed","\xfd"),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Main_obj::ARGUMENTS,"ARGUMENTS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Main_obj::ARGUMENTS,"ARGUMENTS");
};

#endif

hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	HX_HCSTRING("ARGUMENTS","\x36","\xaf","\xef","\xe9"),
	::String(null())
};

void Main_obj::__register()
{
	hx::Object *dummy = new Main_obj;
	Main_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Main","\x59","\x64","\x2f","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e0a1307868675923_1_boot)
HXDLIN(   1)		ARGUMENTS = ::Array_obj< ::Dynamic>::__new(4)->init(0, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("command",4b,71,6d,81),HX_("output",01,0f,81,0c))
            			->setFixed(1,HX_("aliases",fe,2d,b5,a5),::Array_obj< ::String >::fromData( _hx_array_data_332f6459_6,1))
            			->setFixed(2,HX_("kind",54,e1,09,47),::mcli::internal::Kind_obj::Var(HX_("String",f1,9c,c4,45)))
            			->setFixed(3,HX_("name",4b,72,ff,48),HX_("output",01,0f,81,0c))
            			->setFixed(4,HX_("description",fc,08,1d,5f),HX_(" output path  ",04,fc,ac,9a))))->init(1, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("command",4b,71,6d,81),HX_("silent",95,76,cd,b7))
            			->setFixed(1,HX_("aliases",fe,2d,b5,a5),::Array_obj< ::String >::__new(0))
            			->setFixed(2,HX_("kind",54,e1,09,47),::mcli::internal::Kind_obj::Flag_dyn())
            			->setFixed(3,HX_("name",4b,72,ff,48),HX_("silent",95,76,cd,b7))
            			->setFixed(4,HX_("description",fc,08,1d,5f),HX_("without output",d9,0d,49,32))))->init(2, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("command",4b,71,6d,81),HX_("input",0a,c4,1d,be))
            			->setFixed(1,HX_("aliases",fe,2d,b5,a5),::Array_obj< ::String >::fromData( _hx_array_data_332f6459_7,1))
            			->setFixed(2,HX_("kind",54,e1,09,47),::mcli::internal::Kind_obj::Function(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("t",74,00,00,00),HX_("String",f1,9c,c4,45))
            				->setFixed(1,HX_("opt",33,9c,54,00),false)
            				->setFixed(2,HX_("name",4b,72,ff,48),HX_("path",a5,e5,51,4a)))),null()))
            			->setFixed(3,HX_("name",4b,72,ff,48),HX_("input",0a,c4,1d,be))
            			->setFixed(4,HX_("description",fc,08,1d,5f),HX_(" input path  ",5b,2e,6c,a4))))->init(3, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("command",4b,71,6d,81),HX_("help",c1,32,0b,45))
            			->setFixed(1,HX_("aliases",fe,2d,b5,a5),::Array_obj< ::String >::__new(0))
            			->setFixed(2,HX_("kind",54,e1,09,47),::mcli::internal::Kind_obj::Function(::Array_obj< ::Dynamic>::__new(0),null()))
            			->setFixed(3,HX_("name",4b,72,ff,48),HX_("help",c1,32,0b,45))
            			->setFixed(4,HX_("description",fc,08,1d,5f),HX_("HELP",c1,fa,cb,2f))));
            	}
}

