// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Console
#include <Console.h>
#endif
#ifndef INCLUDED_MemoryUtils
#include <MemoryUtils.h>
#endif
#ifndef INCLUDED_converter_Converter
#include <converter/Converter.h>
#endif
#ifndef INCLUDED_format_tools_Deflate
#include <format/tools/Deflate.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c32ce6338dcac924_11_new,"converter.Converter","new",0x9d21a624,"converter.Converter.new","converter/Converter.hx",11,0x3c1fe74d)
HX_LOCAL_STACK_FRAME(_hx_pos_c32ce6338dcac924_16_convertTo4444,"converter.Converter","convertTo4444",0xe1551712,"converter.Converter.convertTo4444","converter/Converter.hx",16,0x3c1fe74d)
HX_LOCAL_STACK_FRAME(_hx_pos_c32ce6338dcac924_7_boot,"converter.Converter","boot",0xd868b9ee,"converter.Converter.boot","converter/Converter.hx",7,0x3c1fe74d)
HX_LOCAL_STACK_FRAME(_hx_pos_c32ce6338dcac924_8_boot,"converter.Converter","boot",0xd868b9ee,"converter.Converter.boot","converter/Converter.hx",8,0x3c1fe74d)
namespace converter{

void Converter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c32ce6338dcac924_11_new)
            	}

Dynamic Converter_obj::__CreateEmpty() { return new Converter_obj; }

void *Converter_obj::_hx_vtable = 0;

Dynamic Converter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Converter_obj > _hx_result = new Converter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Converter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4284a920;
}

int Converter_obj::MAX_8;

int Converter_obj::MAX_4;

 ::Dynamic Converter_obj::convertTo4444( ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_c32ce6338dcac924_16_convertTo4444)
HXLINE(  17)		 ::haxe::io::Bytes output = ::haxe::io::Bytes_obj::alloc(((( (int)(data->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ) * ( (int)(data->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) )) * (int)2));
HXLINE(  19)		int inPosition = (int)0;
HXLINE(  20)		int outPosition = (int)0;
HXLINE(  21)		bool isAlpha = false;
HXLINE(  23)		int colorSpace = (int)15;
HXLINE(  25)		{
HXLINE(  25)			int _g1 = (int)0;
HXDLIN(  25)			int _g = ( (int)(data->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) );
HXDLIN(  25)			while((_g1 < _g)){
HXLINE(  25)				_g1 = (_g1 + (int)1);
HXDLIN(  25)				int i = (_g1 - (int)1);
HXLINE(  27)				{
HXLINE(  27)					int _g3 = (int)0;
HXDLIN(  27)					int _g2 = ( (int)(data->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
HXDLIN(  27)					while((_g3 < _g2)){
HXLINE(  27)						_g3 = (_g3 + (int)1);
HXDLIN(  27)						int j = (_g3 - (int)1);
HXLINE(  32)						inPosition = (inPosition + (int)1);
HXDLIN(  32)						int b = ( ( ::haxe::io::Bytes)(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) )->b->__get((inPosition - (int)1));
HXLINE(  33)						inPosition = (inPosition + (int)1);
HXDLIN(  33)						int g = ( ( ::haxe::io::Bytes)(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) )->b->__get((inPosition - (int)1));
HXLINE(  34)						inPosition = (inPosition + (int)1);
HXDLIN(  34)						int r = ( ( ::haxe::io::Bytes)(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) )->b->__get((inPosition - (int)1));
HXLINE(  35)						inPosition = (inPosition + (int)1);
HXDLIN(  35)						int a = ( ( ::haxe::io::Bytes)(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) )->b->__get((inPosition - (int)1));
HXLINE(  37)						r = ::Math_obj::ceil((((Float)r / (Float)::converter::Converter_obj::MAX_8) * ::converter::Converter_obj::MAX_4));
HXLINE(  38)						g = ::Math_obj::ceil((((Float)g / (Float)::converter::Converter_obj::MAX_8) * ::converter::Converter_obj::MAX_4));
HXLINE(  39)						b = ::Math_obj::ceil((((Float)b / (Float)::converter::Converter_obj::MAX_8) * ::converter::Converter_obj::MAX_4));
HXLINE(  40)						a = ::Math_obj::ceil((((Float)a / (Float)::converter::Converter_obj::MAX_8) * ::converter::Converter_obj::MAX_4));
HXLINE(  54)						bool _hx_tmp;
HXDLIN(  54)						if ((a == (int)255)) {
HXLINE(  54)							_hx_tmp = (a != (int)0);
            						}
            						else {
HXLINE(  54)							_hx_tmp = true;
            						}
HXDLIN(  54)						if (_hx_tmp) {
HXLINE(  55)							isAlpha = true;
            						}
HXLINE(  58)						{
HXLINE(  58)							outPosition = (outPosition + (int)1);
HXDLIN(  58)							::Array< unsigned char > output1 = output->b;
HXDLIN(  58)							output1[(outPosition - (int)1)] = ((int)((int)b << (int)(int)4) | (int)a);
            						}
HXLINE(  59)						{
HXLINE(  59)							outPosition = (outPosition + (int)1);
HXDLIN(  59)							::Array< unsigned char > output2 = output->b;
HXDLIN(  59)							output2[(outPosition - (int)1)] = ((int)((int)r << (int)(int)4) | (int)g);
            						}
            					}
            				}
            			}
            		}
HXLINE(  63)		::Console_obj::println((HX_("original size: ",96,85,f9,d7) + ::MemoryUtils_obj::toKBString(( ( ::haxe::io::Bytes)(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) )->length)));
HXLINE(  64)		::Console_obj::println((HX_("ppx size: ",4f,fe,94,2d) + ::MemoryUtils_obj::toKBString(output->length)));
HXLINE(  65)		output = ::format::tools::Deflate_obj::run(output,(int)9);
HXLINE(  67)		::Console_obj::println((HX_("compressed size: ",66,d3,6f,67) + ::MemoryUtils_obj::toKBString(output->length)));
HXLINE(  69)		return  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("width",06,b6,62,ca), ::Dynamic(data->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)))
            			->setFixed(1,HX_("height",e7,07,4c,02), ::Dynamic(data->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)))
            			->setFixed(2,HX_("alpha",5e,a7,96,21),isAlpha)
            			->setFixed(3,HX_("data",2a,56,63,42),output));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Converter_obj,convertTo4444,return )


Converter_obj::Converter_obj()
{
}

bool Converter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"MAX_8") ) { outValue = ( MAX_8 ); return true; }
		if (HX_FIELD_EQ(inName,"MAX_4") ) { outValue = ( MAX_4 ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convertTo4444") ) { outValue = convertTo4444_dyn(); return true; }
	}
	return false;
}

bool Converter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"MAX_8") ) { MAX_8=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"MAX_4") ) { MAX_4=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Converter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Converter_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Converter_obj::MAX_8,HX_HCSTRING("MAX_8","\x7d","\xa2","\x14","\x81")},
	{hx::fsInt,(void *) &Converter_obj::MAX_4,HX_HCSTRING("MAX_4","\x79","\xa2","\x14","\x81")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Converter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Converter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Converter_obj::MAX_8,"MAX_8");
	HX_MARK_MEMBER_NAME(Converter_obj::MAX_4,"MAX_4");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Converter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Converter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Converter_obj::MAX_8,"MAX_8");
	HX_VISIT_MEMBER_NAME(Converter_obj::MAX_4,"MAX_4");
};

#endif

hx::Class Converter_obj::__mClass;

static ::String Converter_obj_sStaticFields[] = {
	HX_HCSTRING("MAX_8","\x7d","\xa2","\x14","\x81"),
	HX_HCSTRING("MAX_4","\x79","\xa2","\x14","\x81"),
	HX_HCSTRING("convertTo4444","\x4e","\xe4","\xc0","\xa8"),
	::String(null())
};

void Converter_obj::__register()
{
	hx::Object *dummy = new Converter_obj;
	Converter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("converter.Converter","\x32","\x04","\x8b","\x78");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Converter_obj::__GetStatic;
	__mClass->mSetStaticField = &Converter_obj::__SetStatic;
	__mClass->mMarkFunc = Converter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Converter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Converter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Converter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Converter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Converter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Converter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c32ce6338dcac924_7_boot)
HXDLIN(   7)		MAX_8 = (int)255;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c32ce6338dcac924_8_boot)
HXDLIN(   8)		MAX_4 = (int)15;
            	}
}

} // end namespace converter
