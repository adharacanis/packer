// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b5269e0ce41f90ec_67_resolveClass,"Type","resolveClass",0x23b06bc0,"Type.resolveClass","C:\\HaxeToolkit\\haxe\\std/cpp/_std/Type.hx",67,0x00143afe)
HX_LOCAL_STACK_FRAME(_hx_pos_b5269e0ce41f90ec_74_resolveEnum,"Type","resolveEnum",0x26394079,"Type.resolveEnum","C:\\HaxeToolkit\\haxe\\std/cpp/_std/Type.hx",74,0x00143afe)
HX_LOCAL_STACK_FRAME(_hx_pos_b5269e0ce41f90ec_110_getEnumConstructs,"Type","getEnumConstructs",0x7f46cf7f,"Type.getEnumConstructs","C:\\HaxeToolkit\\haxe\\std/cpp/_std/Type.hx",110,0x00143afe)
HX_LOCAL_STACK_FRAME(_hx_pos_b5269e0ce41f90ec_150_allEnums,"Type","allEnums",0x86200985,"Type.allEnums","C:\\HaxeToolkit\\haxe\\std/cpp/_std/Type.hx",150,0x00143afe)

void Type_obj::__construct() { }

Dynamic Type_obj::__CreateEmpty() { return new Type_obj; }

void *Type_obj::_hx_vtable = 0;

Dynamic Type_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Type_obj > _hx_result = new Type_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Type_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x37e21eda;
}

hx::Class Type_obj::resolveClass(::String name){
            	HX_STACKFRAME(&_hx_pos_b5269e0ce41f90ec_67_resolveClass)
HXLINE(  68)		hx::Class result = ::hx::Class_obj::Resolve(name);
HXLINE(  69)		bool _hx_tmp;
HXDLIN(  69)		if (hx::IsNotNull( result )) {
HXLINE(  69)			_hx_tmp = ( (bool)(result->__IsEnum()) );
            		}
            		else {
HXLINE(  69)			_hx_tmp = false;
            		}
HXDLIN(  69)		if (_hx_tmp) {
HXLINE(  70)			return null();
            		}
HXLINE(  71)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,resolveClass,return )

hx::Class Type_obj::resolveEnum(::String name){
            	HX_STACKFRAME(&_hx_pos_b5269e0ce41f90ec_74_resolveEnum)
HXLINE(  75)		hx::Class result = ::hx::Class_obj::Resolve(name);
HXLINE(  76)		bool _hx_tmp;
HXDLIN(  76)		if (hx::IsNotNull( result )) {
HXLINE(  76)			_hx_tmp = !(( (bool)(result->__IsEnum()) ));
            		}
            		else {
HXLINE(  76)			_hx_tmp = false;
            		}
HXDLIN(  76)		if (_hx_tmp) {
HXLINE(  77)			return null();
            		}
HXLINE(  78)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,resolveEnum,return )

::Array< ::String > Type_obj::getEnumConstructs(hx::Class e){
            	HX_STACKFRAME(&_hx_pos_b5269e0ce41f90ec_110_getEnumConstructs)
HXDLIN( 110)		return ( (::Array< ::String >)(e->GetClassFields()) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,getEnumConstructs,return )

::cpp::VirtualArray Type_obj::allEnums(hx::Class e){
            	HX_STACKFRAME(&_hx_pos_b5269e0ce41f90ec_150_allEnums)
HXLINE( 151)		::Array< ::String > names = ( (::Array< ::String >)(e->GetClassFields()) );
HXLINE( 152)		::cpp::VirtualArray enums = ::cpp::VirtualArray_obj::__new();
HXLINE( 153)		{
HXLINE( 153)			int _g = (int)0;
HXDLIN( 153)			while((_g < names->length)){
HXLINE( 153)				::String name = names->__get(_g);
HXDLIN( 153)				_g = (_g + (int)1);
HXLINE( 155)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 156)					 ::Dynamic result = e->ConstructEnum(name,null());
HXLINE( 157)					if (hx::IsNotNull( result )) {
HXLINE( 158)						enums->push(result);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String invalidArgCount = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE( 162)		return enums;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,allEnums,return )


Type_obj::Type_obj()
{
}

bool Type_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"allEnums") ) { outValue = allEnums_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"resolveEnum") ) { outValue = resolveEnum_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resolveClass") ) { outValue = resolveClass_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getEnumConstructs") ) { outValue = getEnumConstructs_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Type_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Type_obj_sStaticStorageInfo = 0;
#endif

static void Type_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Type_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Type_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Type_obj::__mClass,"__mClass");
};

#endif

hx::Class Type_obj::__mClass;

static ::String Type_obj_sStaticFields[] = {
	HX_HCSTRING("resolveClass","\xac","\xbd","\xdd","\x80"),
	HX_HCSTRING("resolveEnum","\x0d","\x90","\x51","\xde"),
	HX_HCSTRING("getEnumConstructs","\x13","\x06","\x6d","\x83"),
	HX_HCSTRING("allEnums","\x71","\xf5","\x6a","\x69"),
	::String(null())
};

void Type_obj::__register()
{
	hx::Object *dummy = new Type_obj;
	Type_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Type","\xda","\x1e","\xe2","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Type_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Type_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Type_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Type_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Type_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Type_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Type_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

