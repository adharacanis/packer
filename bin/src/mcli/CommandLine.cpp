// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_mcli_CommandLine
#include <mcli/CommandLine.h>
#endif
#ifndef INCLUDED_mcli_Dispatch
#include <mcli/Dispatch.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_55e613d0e7864fc7_7_new,"mcli.CommandLine","new",0x0d83f416,"mcli.CommandLine.new","mcli/CommandLine.hx",7,0x62883fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_55e613d0e7864fc7_18_getArguments,"mcli.CommandLine","getArguments",0xae12916a,"mcli.CommandLine.getArguments","mcli/CommandLine.hx",18,0x62883fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_55e613d0e7864fc7_26_preventDefault,"mcli.CommandLine","preventDefault",0xf289d8d3,"mcli.CommandLine.preventDefault","mcli/CommandLine.hx",26,0x62883fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_55e613d0e7864fc7_31_showUsage,"mcli.CommandLine","showUsage",0xe942931a,"mcli.CommandLine.showUsage","mcli/CommandLine.hx",31,0x62883fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_55e613d0e7864fc7_36_toString,"mcli.CommandLine","toString",0x9fd37936,"mcli.CommandLine.toString","mcli/CommandLine.hx",36,0x62883fdb)
namespace mcli{

void CommandLine_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_55e613d0e7864fc7_7_new)
HXDLIN(   7)		this->_preventDefault = false;
            	}

Dynamic CommandLine_obj::__CreateEmpty() { return new CommandLine_obj; }

void *CommandLine_obj::_hx_vtable = 0;

Dynamic CommandLine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CommandLine_obj > _hx_result = new CommandLine_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CommandLine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x27f9cbe8;
}

::Array< ::Dynamic> CommandLine_obj::getArguments(){
            	HX_STACKFRAME(&_hx_pos_55e613d0e7864fc7_18_getArguments)
HXDLIN(  18)		return ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CommandLine_obj,getArguments,return )

void CommandLine_obj::preventDefault(){
            	HX_STACKFRAME(&_hx_pos_55e613d0e7864fc7_26_preventDefault)
HXDLIN(  26)		this->_preventDefault = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CommandLine_obj,preventDefault,(void))

::String CommandLine_obj::showUsage(){
            	HX_STACKFRAME(&_hx_pos_55e613d0e7864fc7_31_showUsage)
HXDLIN(  31)		return ::mcli::Dispatch_obj::showUsageOf(this->getArguments(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CommandLine_obj,showUsage,return )

::String CommandLine_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_55e613d0e7864fc7_36_toString)
HXDLIN(  36)		return this->showUsage();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CommandLine_obj,toString,return )


hx::ObjectPtr< CommandLine_obj > CommandLine_obj::__new() {
	hx::ObjectPtr< CommandLine_obj > __this = new CommandLine_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< CommandLine_obj > CommandLine_obj::__alloc(hx::Ctx *_hx_ctx) {
	CommandLine_obj *__this = (CommandLine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CommandLine_obj), false, "mcli.CommandLine"));
	*(void **)__this = CommandLine_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CommandLine_obj::CommandLine_obj()
{
}

hx::Val CommandLine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"showUsage") ) { return hx::Val( showUsage_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getArguments") ) { return hx::Val( getArguments_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"preventDefault") ) { return hx::Val( preventDefault_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_preventDefault") ) { return hx::Val( _preventDefault ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CommandLine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"_preventDefault") ) { _preventDefault=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CommandLine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_preventDefault","\x68","\x75","\x05","\xb1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CommandLine_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(CommandLine_obj,_preventDefault),HX_HCSTRING("_preventDefault","\x68","\x75","\x05","\xb1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CommandLine_obj_sStaticStorageInfo = 0;
#endif

static ::String CommandLine_obj_sMemberFields[] = {
	HX_HCSTRING("_preventDefault","\x68","\x75","\x05","\xb1"),
	HX_HCSTRING("getArguments","\xe0","\xdb","\xed","\xfd"),
	HX_HCSTRING("preventDefault","\xc9","\x2c","\xa5","\x67"),
	HX_HCSTRING("showUsage","\xe4","\xc2","\x93","\xd8"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void CommandLine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CommandLine_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CommandLine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CommandLine_obj::__mClass,"__mClass");
};

#endif

hx::Class CommandLine_obj::__mClass;

void CommandLine_obj::__register()
{
	hx::Object *dummy = new CommandLine_obj;
	CommandLine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("mcli.CommandLine","\x24","\xf1","\x8e","\xc3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CommandLine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CommandLine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CommandLine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CommandLine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CommandLine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CommandLine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mcli
