// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_mcli_internal_Tools
#include <mcli/internal/Tools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_cdcf43b69f597284_7_toDashSep,"mcli.internal.Tools","toDashSep",0x2d73a048,"mcli.internal.Tools.toDashSep","mcli/internal/Tools.hx",7,0x3445eaf9)
HX_LOCAL_STACK_FRAME(_hx_pos_cdcf43b69f597284_30_parseComments,"mcli.internal.Tools","parseComments",0x6cef731e,"mcli.internal.Tools.parseComments","mcli/internal/Tools.hx",30,0x3445eaf9)
namespace mcli{
namespace internal{

void Tools_obj::__construct() { }

Dynamic Tools_obj::__CreateEmpty() { return new Tools_obj; }

void *Tools_obj::_hx_vtable = 0;

Dynamic Tools_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tools_obj > _hx_result = new Tools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Tools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x37de5463;
}

::String Tools_obj::toDashSep(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_cdcf43b69f597284_7_toDashSep)
HXLINE(   8)		if ((s.length <= (int)1)) {
HXLINE(   8)			return s;
            		}
HXLINE(   9)		 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  10)		bool first = true;
HXLINE(  11)		{
HXLINE(  11)			int _g1 = (int)0;
HXDLIN(  11)			int _g = s.length;
HXDLIN(  11)			while((_g1 < _g)){
HXLINE(  11)				_g1 = (_g1 + (int)1);
HXDLIN(  11)				int i = (_g1 - (int)1);
HXLINE(  13)				 ::Dynamic chr = s.charCodeAt(i);
HXLINE(  14)				bool _hx_tmp;
HXDLIN(  14)				if (hx::IsGreaterEq( chr,(int)65 )) {
HXLINE(  14)					_hx_tmp = hx::IsLessEq( chr,(int)90 );
            				}
            				else {
HXLINE(  14)					_hx_tmp = false;
            				}
HXDLIN(  14)				if (_hx_tmp) {
HXLINE(  16)					if (!(first)) {
HXLINE(  17)						if (hx::IsNull( buf->charBuf )) {
HXLINE(  17)							buf->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(  17)						buf->charBuf->push((int)45);
            					}
HXLINE(  18)					{
HXLINE(  18)						if (hx::IsNull( buf->charBuf )) {
HXLINE(  18)							buf->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(  18)						::Array< char > buf1 = buf->charBuf;
HXDLIN(  18)						buf1->push((chr - (int)-32));
            					}
HXLINE(  19)					first = true;
            				}
            				else {
HXLINE(  21)					{
HXLINE(  21)						if (hx::IsNull( buf->charBuf )) {
HXLINE(  21)							buf->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(  21)						buf->charBuf->push(chr);
            					}
HXLINE(  22)					first = false;
            				}
            			}
            		}
HXLINE(  26)		return buf->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tools_obj,toDashSep,return )

::Array< ::Dynamic> Tools_obj::parseComments(::String c){
            	HX_GC_STACKFRAME(&_hx_pos_cdcf43b69f597284_30_parseComments)
HXLINE(  31)		::Array< ::Dynamic> ret = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  32)		::String curTag = null();
HXLINE(  33)		 ::StringBuf txt =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  34)		{
HXLINE(  34)			int _g = (int)0;
HXDLIN(  34)			::Array< ::String > _g1 = c.split(HX_("\n",0a,00,00,00));
HXDLIN(  34)			while((_g < _g1->length)){
HXLINE(  34)				::String ln = _g1->__get(_g);
HXDLIN(  34)				_g = (_g + (int)1);
HXLINE(  36)				int i = (int)0;
HXDLIN(  36)				int len = ln.length;
HXLINE(  37)				bool foundTab = false;
HXLINE(  38)				while((i < len)){
HXLINE(  40)					int _g2 = ln.cca(i);
HXDLIN(  40)					switch((int)(_g2)){
            						case (int)9: {
HXLINE(  43)							i = (i + (int)1);
HXLINE(  44)							foundTab = true;
            						}
            						break;
            						case (int)32: {
HXLINE(  45)							bool _hx_tmp;
HXDLIN(  45)							if (!(!(foundTab))) {
HXLINE(  45)								if ((i > (int)0)) {
HXLINE(  45)									::String ln1 = ln;
HXDLIN(  45)									_hx_tmp = (ln1.cca((i - (int)1)) == (int)42);
            								}
            								else {
HXLINE(  45)									_hx_tmp = false;
            								}
            							}
            							else {
HXLINE(  45)								_hx_tmp = true;
            							}
HXDLIN(  45)							if (_hx_tmp) {
HXLINE(  46)								i = (i + (int)1);
            							}
            							else {
HXLINE(  68)								goto _hx_goto_3;
            							}
            						}
            						break;
            						case (int)42: {
HXLINE(  48)							i = (i + (int)1);
            						}
            						break;
            						case (int)64: {
HXLINE(  50)							::String t = txt->toString();
HXLINE(  51)							txt =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  52)							bool _hx_tmp1;
HXDLIN(  52)							if (hx::IsNull( curTag )) {
HXLINE(  52)								_hx_tmp1 = (t.length > (int)0);
            							}
            							else {
HXLINE(  52)								_hx_tmp1 = true;
            							}
HXDLIN(  52)							if (_hx_tmp1) {
HXLINE(  54)								ret->push( ::Dynamic(hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("tag",5a,5a,58,00),curTag)
            									->setFixed(1,HX_("contents",1a,05,24,2f),t)));
            							}
HXLINE(  56)							i = (i + (int)1);
HXDLIN(  56)							int begin = i;
HXLINE(  57)							while((i < len)){
HXLINE(  59)								int _g21 = ln.cca(i);
HXDLIN(  59)								switch((int)(_g21)){
            									case (int)9: case (int)32: {
HXLINE(  62)										goto _hx_goto_4;
            									}
            									break;
            									default:{
HXLINE(  63)										i = (i + (int)1);
            									}
            								}
            							}
            							_hx_goto_4:;
HXLINE(  66)							curTag = ln.substr(begin,(i - begin));
HXLINE(  67)							goto _hx_goto_3;
            						}
            						break;
            						default:{
HXLINE(  68)							goto _hx_goto_3;
            						}
            					}
            				}
            				_hx_goto_3:;
HXLINE(  71)				if ((i < len)) {
HXLINE(  73)					{
HXLINE(  73)						::String x = ::StringTools_obj::rtrim(::StringTools_obj::replace(ln.substr(i,null()),HX_("\r",0d,00,00,00),HX_("",00,00,00,00)));
HXDLIN(  73)						if (hx::IsNotNull( txt->charBuf )) {
HXLINE(  73)							txt->flush();
            						}
HXDLIN(  73)						if (hx::IsNull( txt->b )) {
HXLINE(  73)							txt->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            						}
            						else {
HXLINE(  73)							::Array< ::String > txt1 = txt->b;
HXDLIN(  73)							txt1->push(::Std_obj::string(x));
            						}
            					}
HXLINE(  74)					{
HXLINE(  74)						if (hx::IsNull( txt->charBuf )) {
HXLINE(  74)							txt->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(  74)						txt->charBuf->push((int)32);
            					}
            				}
HXLINE(  76)				{
HXLINE(  76)					if (hx::IsNull( txt->charBuf )) {
HXLINE(  76)						txt->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN(  76)					txt->charBuf->push((int)10);
            				}
            			}
            		}
HXLINE(  79)		::String t1 = ::StringTools_obj::trim(txt->toString());
HXLINE(  80)		bool _hx_tmp2;
HXDLIN(  80)		if (hx::IsNull( curTag )) {
HXLINE(  80)			_hx_tmp2 = (t1.length > (int)0);
            		}
            		else {
HXLINE(  80)			_hx_tmp2 = true;
            		}
HXDLIN(  80)		if (_hx_tmp2) {
HXLINE(  81)			ret->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("tag",5a,5a,58,00),curTag)
            				->setFixed(1,HX_("contents",1a,05,24,2f),t1)));
            		}
HXLINE(  83)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tools_obj,parseComments,return )


Tools_obj::Tools_obj()
{
}

bool Tools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"toDashSep") ) { outValue = toDashSep_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"parseComments") ) { outValue = parseComments_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Tools_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Tools_obj_sStaticStorageInfo = 0;
#endif

static void Tools_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tools_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tools_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tools_obj::__mClass,"__mClass");
};

#endif

hx::Class Tools_obj::__mClass;

static ::String Tools_obj_sStaticFields[] = {
	HX_HCSTRING("toDashSep","\x31","\xd5","\xa6","\xb2"),
	HX_HCSTRING("parseComments","\x87","\xd0","\x29","\x06"),
	::String(null())
};

void Tools_obj::__register()
{
	hx::Object *dummy = new Tools_obj;
	Tools_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("mcli.internal.Tools","\xc5","\xb8","\x2c","\xf6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Tools_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Tools_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Tools_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Tools_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tools_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tools_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mcli
} // end namespace internal
