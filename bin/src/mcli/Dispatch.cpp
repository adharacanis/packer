// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_Lib
#include <cpp/Lib.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_mcli_CommandLine
#include <mcli/CommandLine.h>
#endif
#ifndef INCLUDED_mcli_Dispatch
#include <mcli/Dispatch.h>
#endif
#ifndef INCLUDED_mcli_DispatchError
#include <mcli/DispatchError.h>
#endif
#ifndef INCLUDED_mcli_internal_Kind
#include <mcli/internal/Kind.h>
#endif
#ifndef INCLUDED_mcli_internal_Tools
#include <mcli/internal/Tools.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_42d66b67fb9d7178_305_new,"mcli.Dispatch","new",0x1bfe16c7,"mcli.Dispatch.new","mcli/Dispatch.hx",305,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_314_errln,"mcli.Dispatch","errln",0x82bfb74e,"mcli.Dispatch.errln","mcli/Dispatch.hx",314,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_323_println,"mcli.Dispatch","println",0x17bee1d6,"mcli.Dispatch.println","mcli/Dispatch.hx",323,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_343_dispatch,"mcli.Dispatch","dispatch",0xa47df2f3,"mcli.Dispatch.dispatch","mcli/Dispatch.hx",343,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_412__dispatch,"mcli.Dispatch","_dispatch",0x36bf53c0,"mcli.Dispatch._dispatch","mcli/Dispatch.hx",412,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_500__dispatch,"mcli.Dispatch","_dispatch",0x36bf53c0,"mcli.Dispatch._dispatch","mcli/Dispatch.hx",500,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_518__dispatch,"mcli.Dispatch","_dispatch",0x36bf53c0,"mcli.Dispatch._dispatch","mcli/Dispatch.hx",518,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_366__dispatch,"mcli.Dispatch","_dispatch",0x36bf53c0,"mcli.Dispatch._dispatch","mcli/Dispatch.hx",366,0x86c08c28)
static const bool _hx_array_data_3bd3a755_19[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_539__dispatch,"mcli.Dispatch","_dispatch",0x36bf53c0,"mcli.Dispatch._dispatch","mcli/Dispatch.hx",539,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_575__dispatch,"mcli.Dispatch","_dispatch",0x36bf53c0,"mcli.Dispatch._dispatch","mcli/Dispatch.hx",575,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_33_argToString,"mcli.Dispatch","argToString",0x1e335689,"mcli.Dispatch.argToString","mcli/Dispatch.hx",33,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_39_argToString,"mcli.Dispatch","argToString",0x1e335689,"mcli.Dispatch.argToString","mcli/Dispatch.hx",39,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_22_argToString,"mcli.Dispatch","argToString",0x1e335689,"mcli.Dispatch.argToString","mcli/Dispatch.hx",22,0x86c08c28)
static const ::String _hx_array_data_3bd3a755_28[] = {
	HX_("  ",00,1c,00,00),
};
static const ::String _hx_array_data_3bd3a755_29[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_3bd3a755_30[] = {
	HX_(" ",20,00,00,00),
};
static const ::String _hx_array_data_3bd3a755_31[] = {
	HX_("   ",20,64,18,00),
};
static const ::String _hx_array_data_3bd3a755_32[] = {
	HX_(" ",20,00,00,00),
};
static const ::String _hx_array_data_3bd3a755_33[] = {
	HX_(" ",20,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_87_showUsageOf,"mcli.Dispatch","showUsageOf",0xaeb70e82,"mcli.Dispatch.showUsageOf","mcli/Dispatch.hx",87,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_121_getScreenSize,"mcli.Dispatch","getScreenSize",0xdff777aa,"mcli.Dispatch.getScreenSize","mcli/Dispatch.hx",121,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_162_getAliases,"mcli.Dispatch","getAliases",0xd12d1881,"mcli.Dispatch.getAliases","mcli/Dispatch.hx",162,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_160_getAliases,"mcli.Dispatch","getAliases",0xd12d1881,"mcli.Dispatch.getAliases","mcli/Dispatch.hx",160,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_172_getPostfix,"mcli.Dispatch","getPostfix",0x428823f8,"mcli.Dispatch.getPostfix","mcli/Dispatch.hx",172,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_243_addDecoderRuntime,"mcli.Dispatch","addDecoderRuntime",0xe384945c,"mcli.Dispatch.addDecoderRuntime","mcli/Dispatch.hx",243,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_251_decode,"mcli.Dispatch","decode",0xf887d127,"mcli.Dispatch.decode","mcli/Dispatch.hx",251,0x86c08c28)
HX_LOCAL_STACK_FRAME(_hx_pos_42d66b67fb9d7178_330_isArgument,"mcli.Dispatch","isArgument",0x5c6ee500,"mcli.Dispatch.isArgument","mcli/Dispatch.hx",330,0x86c08c28)
namespace mcli{

void Dispatch_obj::__construct(::Array< ::String > args){
            	HX_STACKFRAME(&_hx_pos_42d66b67fb9d7178_305_new)
HXLINE( 306)		this->args = args->copy();
HXLINE( 307)		this->args->reverse();
HXLINE( 308)		this->depth = (int)0;
            	}

Dynamic Dispatch_obj::__CreateEmpty() { return new Dispatch_obj; }

void *Dispatch_obj::_hx_vtable = 0;

Dynamic Dispatch_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Dispatch_obj > _hx_result = new Dispatch_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Dispatch_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2d749175;
}

void Dispatch_obj::errln(::String s){
            	HX_STACKFRAME(&_hx_pos_42d66b67fb9d7178_314_errln)
HXDLIN( 314)		 ::haxe::io::Output _hx_tmp = ::Sys_obj::_hx_stderr();
HXDLIN( 314)		_hx_tmp->writeString((s + HX_("\n",0a,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dispatch_obj,errln,(void))

void Dispatch_obj::println(::String s){
            	HX_STACKFRAME(&_hx_pos_42d66b67fb9d7178_323_println)
HXDLIN( 323)		::Sys_obj::println(s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dispatch_obj,println,(void))

void Dispatch_obj::dispatch( ::mcli::CommandLine v,hx::Null< bool >  __o_handleExceptions){
bool handleExceptions = __o_handleExceptions.Default(true);
            	HX_STACKFRAME(&_hx_pos_42d66b67fb9d7178_343_dispatch)
HXLINE( 344)		this->depth++;
HXLINE( 345)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 347)			this->_dispatch(v,handleExceptions);
HXLINE( 348)			this->depth--;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 352)				this->depth--;
HXLINE( 354)				HX_STACK_DO_RETHROW(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Dispatch_obj,dispatch,(void))

void Dispatch_obj::_dispatch( ::mcli::CommandLine v,bool handleExceptions){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1, ::mcli::Dispatch,_gthis, ::mcli::CommandLine,v,::Array< ::Dynamic>,delays,::Array< bool >,didCall) HXARGC(2)
            		void _hx_run(::String arg1, ::Dynamic argDef){
            			HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_412__dispatch)
HXLINE( 412)			 ::mcli::internal::Kind _g3 = argDef->__Field(HX_("kind",54,e1,09,47),hx::paccDynamic);
HXDLIN( 412)			switch((int)(_hx_getEnumValueIndex(_g3))){
            				case (int)0: {
HXLINE( 512)					HX_STACK_DO_THROW(::mcli::DispatchError_obj::UnknownArgument(arg1));
            				}
            				break;
            				case (int)1: {
HXLINE( 415)					::Reflect_obj::setProperty(v,( (::String)(argDef->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ),true);
            				}
            				break;
            				case (int)2: {
HXLINE( 416)					 ::Dynamic arr = _g3->_hx_getObject(2);
HXDLIN( 416)					 ::Dynamic val = _g3->_hx_getObject(1);
HXDLIN( 416)					 ::Dynamic key = _g3->_hx_getObject(0);
HXDLIN( 416)					{
HXLINE( 417)						::Dynamic map = ::Reflect_obj::getProperty(v,( (::String)(argDef->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
HXLINE( 418)						::String n = ( (::String)(_gthis->args->pop()) );
HXLINE( 419)						::Array< ::String > toAdd = ::Array_obj< ::String >::__new(0);
HXLINE( 420)						while(true){
HXLINE( 420)							bool runArgument1;
HXDLIN( 420)							if (hx::IsNotNull( n )) {
HXLINE( 420)								runArgument1 = ::mcli::Dispatch_obj::isArgument(n);
            							}
            							else {
HXLINE( 420)								runArgument1 = false;
            							}
HXDLIN( 420)							if (!(runArgument1)) {
HXLINE( 420)								goto _hx_goto_6;
            							}
HXLINE( 422)							toAdd->push(n);
HXLINE( 423)							n = ( (::String)(_gthis->args->pop()) );
            						}
            						_hx_goto_6:;
HXLINE( 425)						if (hx::IsNull( n )) {
HXLINE( 426)							HX_STACK_DO_THROW(::mcli::DispatchError_obj::MissingOptionArgument(arg1, ::Dynamic(key->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic))));
            						}
HXLINE( 427)						::Array< ::String > kv = n.split(HX_("=",3d,00,00,00));
HXLINE( 428)						 ::Dynamic k = ::mcli::Dispatch_obj::decode(kv->__get((int)0),( (::String)(key->__Field(HX_("t",74,00,00,00),hx::paccDynamic)) ));
HXLINE( 429)						 ::Dynamic v1 = null();
HXLINE( 430)						if (hx::IsNotNull( kv->__get((int)1) )) {
HXLINE( 431)							v1 = ::mcli::Dispatch_obj::decode(kv->__get((int)1),( (::String)(val->__Field(HX_("t",74,00,00,00),hx::paccDynamic)) ));
            						}
HXLINE( 432)						 ::Dynamic oldv = ::haxe::IMap_obj::get(map,k);
HXLINE( 433)						if (hx::IsNotNull( oldv )) {
HXLINE( 435)							if (arr) {
HXLINE( 436)								oldv->__Field(HX_("push",da,11,61,4a),hx::paccDynamic)(v1);
            							}
            						}
            						else {
HXLINE( 440)							if (arr) {
HXLINE( 441)								::haxe::IMap_obj::set(map,k,::cpp::VirtualArray_obj::__new(1)->init(0,v1));
            							}
            							else {
HXLINE( 443)								::haxe::IMap_obj::set(map,k,v1);
            							}
            						}
HXLINE( 445)						if ((toAdd->length > (int)0)) {
HXLINE( 447)							toAdd->reverse();
HXLINE( 448)							_gthis->args = _gthis->args->concat(toAdd);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 450)					::String t2 = _g3->_hx_getString(0);
HXDLIN( 450)					{
HXLINE( 451)						::String n1 = ( (::String)(_gthis->args->pop()) );
HXLINE( 452)						::Array< ::String > toAdd1 = ::Array_obj< ::String >::__new(0);
HXLINE( 453)						while(true){
HXLINE( 453)							bool runArgument2;
HXDLIN( 453)							if (hx::IsNotNull( n1 )) {
HXLINE( 453)								runArgument2 = ::mcli::Dispatch_obj::isArgument(n1);
            							}
            							else {
HXLINE( 453)								runArgument2 = false;
            							}
HXDLIN( 453)							if (!(runArgument2)) {
HXLINE( 453)								goto _hx_goto_7;
            							}
HXLINE( 455)							toAdd1->push(n1);
HXLINE( 456)							n1 = ( (::String)(_gthis->args->pop()) );
            						}
            						_hx_goto_7:;
HXLINE( 458)						if (hx::IsNull( n1 )) {
HXLINE( 459)							HX_STACK_DO_THROW(::mcli::DispatchError_obj::MissingOptionArgument(arg1,null()));
            						}
HXLINE( 460)						 ::Dynamic val1 = ::mcli::Dispatch_obj::decode(n1,t2);
HXLINE( 461)						::Reflect_obj::setProperty(v,( (::String)(argDef->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ),val1);
HXLINE( 462)						if ((toAdd1->length > (int)0)) {
HXLINE( 464)							toAdd1->reverse();
HXLINE( 465)							_gthis->args = _gthis->args->concat(toAdd1);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 467)					::String varArg = _g3->_hx_getString(1);
HXDLIN( 467)					::Array< ::Dynamic> fargs = _g3->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 467)					{
            						HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::Dynamic,argDef,::cpp::VirtualArray,applied, ::mcli::CommandLine,v) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_500__dispatch)
HXLINE( 500)							 ::Dynamic runArgument6 = ::Reflect_obj::field(v,( (::String)(argDef->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
HXDLIN( 500)							::Reflect_obj::callMethod(v,runArgument6,applied);
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 468)						didCall[(int)0] = true;
HXLINE( 469)						::cpp::VirtualArray applied = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 470)						::Array< ::String > toAdd2 = ::Array_obj< ::String >::__new(0);
HXLINE( 471)						::String origArg = arg1;
HXLINE( 472)						{
HXLINE( 472)							int _g4 = (int)0;
HXDLIN( 472)							while((_g4 < fargs->length)){
HXLINE( 472)								 ::Dynamic fa = fargs->__get(_g4);
HXDLIN( 472)								_g4 = (_g4 + (int)1);
HXLINE( 474)								arg1 = ( (::String)(_gthis->args->pop()) );
HXLINE( 475)								while(true){
HXLINE( 475)									bool runArgument3;
HXDLIN( 475)									if (hx::IsNotNull( arg1 )) {
HXLINE( 475)										runArgument3 = ::mcli::Dispatch_obj::isArgument(arg1);
            									}
            									else {
HXLINE( 475)										runArgument3 = false;
            									}
HXDLIN( 475)									if (!(runArgument3)) {
HXLINE( 475)										goto _hx_goto_9;
            									}
HXLINE( 477)									toAdd2->push(arg1);
HXLINE( 478)									arg1 = ( (::String)(_gthis->args->pop()) );
            								}
            								_hx_goto_9:;
HXLINE( 480)								bool runArgument4;
HXDLIN( 480)								if (hx::IsNull( arg1 )) {
HXLINE( 480)									runArgument4 = !(( (bool)(fa->__Field(HX_("opt",33,9c,54,00),hx::paccDynamic)) ));
            								}
            								else {
HXLINE( 480)									runArgument4 = false;
            								}
HXDLIN( 480)								if (runArgument4) {
HXLINE( 481)									HX_STACK_DO_THROW(::mcli::DispatchError_obj::MissingOptionArgument(origArg, ::Dynamic(fa->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic))));
            								}
HXLINE( 482)								 ::Dynamic runArgument5 = ::mcli::Dispatch_obj::decode(arg1,( (::String)(fa->__Field(HX_("t",74,00,00,00),hx::paccDynamic)) ));
HXDLIN( 482)								applied->push(runArgument5);
            							}
            						}
HXLINE( 484)						if (hx::IsNotNull( varArg )) {
HXLINE( 486)							::cpp::VirtualArray va = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 487)							while((_gthis->args->length > (int)0)){
HXLINE( 489)								::String arg2 = ( (::String)(_gthis->args->pop()) );
HXLINE( 490)								if (::mcli::Dispatch_obj::isArgument(arg2)) {
HXLINE( 492)									_gthis->args->push(arg2);
HXLINE( 493)									goto _hx_goto_10;
            								}
            								else {
HXLINE( 495)									va->push(::mcli::Dispatch_obj::decode(arg2,varArg));
            								}
            							}
            							_hx_goto_10:;
HXLINE( 498)							applied->push(va);
            						}
HXLINE( 500)						delays->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->push( ::Dynamic(new _hx_Closure_0(argDef,applied,v)));
HXLINE( 501)						if ((toAdd2->length != (int)0)) {
HXLINE( 503)							toAdd2->reverse();
HXLINE( 504)							_gthis->args = _gthis->args->concat(toAdd2);
            						}
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 507)					didCall[(int)0] = true;
HXLINE( 508)					{
HXLINE( 508)						int _g5 = (int)0;
HXDLIN( 508)						while((_g5 < delays->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->length)){
HXLINE( 508)							 ::Dynamic d = delays->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->__get(_g5);
HXDLIN( 508)							_g5 = (_g5 + (int)1);
HXDLIN( 508)							d();
            						}
            					}
HXLINE( 509)					delays[(int)0] = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 510)					 ::Dynamic runArgument7 = ::Reflect_obj::field(v,( (::String)(argDef->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
HXDLIN( 510)					::Reflect_obj::callMethod(v,runArgument7,::cpp::VirtualArray_obj::__new(1)->init(0,_gthis));
            				}
            				break;
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::haxe::ds::StringMap,names) HXARGC(0)
            		::String _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_518__dispatch)
HXLINE( 518)			if (names->exists(HX_("--run-default",1f,e7,ed,63))) {
HXLINE( 518)				return HX_("--run-default",1f,e7,ed,63);
            			}
            			else {
HXLINE( 519)				if (names->exists(HX_("run-default",7f,92,71,92))) {
HXLINE( 519)					return HX_("run-default",7f,92,71,92);
            				}
            				else {
HXLINE( 520)					return HX_("",00,00,00,00);
            				}
            			}
HXLINE( 518)			return null();
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_366__dispatch)
HXLINE( 365)		 ::mcli::Dispatch _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 367)		if (handleExceptions) {
HXLINE( 369)			try {
            				HX_STACK_CATCHABLE( ::mcli::DispatchError, 0);
HXLINE( 371)				this->_dispatch(v,false);
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::mcli::DispatchError >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::mcli::DispatchError e = _hx_e;
HXLINE( 375)					switch((int)(_hx_getEnumValueIndex(e))){
            						case (int)0: {
HXLINE( 377)							::String a = e->_hx_getString(0);
HXLINE( 378)							this->errln((HX_("ERROR: Unknown argument: ",27,f7,d8,28) + a));
            						}
            						break;
            						case (int)1: {
HXLINE( 379)							::String p = e->_hx_getString(1);
HXDLIN( 379)							::String t = e->_hx_getString(0);
HXLINE( 380)							this->errln((((HX_("ERROR: Unrecognized format for ",7d,e9,a2,0a) + t) + HX_(". Passed ",9e,78,67,58)) + p));
            						}
            						break;
            						case (int)2: {
HXLINE( 381)							::String t1 = e->_hx_getString(0);
HXLINE( 382)							this->errln((HX_("[mcli error] No Decoder found for type ",2f,14,f2,d5) + t1));
            						}
            						break;
            						case (int)3: {
HXLINE( 383)							::String name = e->_hx_getString(1);
HXDLIN( 383)							::String opt = e->_hx_getString(0);
HXDLIN( 383)							if ((opt == HX_("--run-default",1f,e7,ed,63))) {
HXLINE( 384)								this->errln(((HX_("ERROR: The argument ",66,39,3f,d1) + name) + HX_(" is required",35,3c,2b,85)));
            							}
            							else {
HXLINE( 385)								::String name1 = e->_hx_getString(1);
HXDLIN( 385)								::String opt1 = e->_hx_getString(0);
HXDLIN( 385)								{
HXLINE( 386)									if (hx::IsNotNull( name1 )) {
HXLINE( 386)										name1 = ((HX_(" (",08,1c,00,00) + name1) + HX_(")",29,00,00,00));
            									}
            									else {
HXLINE( 386)										name1 = HX_("",00,00,00,00);
            									}
HXLINE( 387)									this->errln(((((HX_("ERROR: The option ",ae,be,f1,b5) + opt1) + HX_(" requires an argument ",e2,77,ea,4d)) + name1) + HX_(", but no argument was passed",5e,b1,da,13)));
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 389)							this->errln(HX_("ERROR: Missing arguments",ee,8d,ea,13));
            						}
            						break;
            						case (int)5: {
HXLINE( 391)							this->errln(HX_("ERROR: Too many arguments",8f,ec,12,bd));
            						}
            						break;
            					}
HXLINE( 393)					this->println(v->showUsage());
HXLINE( 395)					::Sys_obj::exit((int)1);
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 399)			return;
            		}
HXLINE( 402)		::Array< ::Dynamic> defs = v->getArguments();
HXLINE( 403)		 ::haxe::ds::StringMap names =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 404)		{
HXLINE( 404)			int _g = (int)0;
HXDLIN( 404)			while((_g < defs->length)){
HXLINE( 404)				 ::Dynamic arg = defs->__get(_g);
HXDLIN( 404)				_g = (_g + (int)1);
HXLINE( 405)				{
HXLINE( 405)					int _g1 = (int)0;
HXDLIN( 405)					::Array< ::String > _g2 = ::mcli::Dispatch_obj::getAliases(arg);
HXDLIN( 405)					while((_g1 < _g2->length)){
HXLINE( 405)						::String a1 = _g2->__get(_g1);
HXDLIN( 405)						_g1 = (_g1 + (int)1);
HXLINE( 406)						names->set(a1,arg);
            					}
            				}
            			}
            		}
HXLINE( 408)		::Array< bool > didCall = ::Array_obj< bool >::fromData( _hx_array_data_3bd3a755_19,1);
HXDLIN( 408)		bool defaultRan = false;
HXLINE( 409)		::Array< ::Dynamic> delays = ::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< ::Dynamic>::__new(0));
HXLINE( 410)		 ::Dynamic runArgument =  ::Dynamic(new _hx_Closure_1(_gthis,v,delays,didCall));
HXLINE( 516)		 ::Dynamic getDefaultAlias =  ::Dynamic(new _hx_Closure_2(names));
HXLINE( 523)		while((this->args->length > (int)0)){
HXLINE( 525)			::String arg3 = ( (::String)(this->args->pop()) );
HXLINE( 526)			 ::Dynamic argDef1 = names->get(arg3);
HXLINE( 527)			if (hx::IsNull( argDef1 )) {
HXLINE( 529)				if (!(::mcli::Dispatch_obj::isArgument(arg3))) {
HXLINE( 531)					bool _hx_tmp;
HXDLIN( 531)					if (!(defaultRan)) {
HXLINE( 531)						_hx_tmp = !(v->_preventDefault);
            					}
            					else {
HXLINE( 531)						_hx_tmp = false;
            					}
HXDLIN( 531)					if (_hx_tmp) {
HXLINE( 533)						::String key1 = ( (::String)(getDefaultAlias()) );
HXDLIN( 533)						argDef1 = names->get(key1);
HXLINE( 534)						if (hx::IsNotNull( argDef1 )) {
HXLINE( 535)							defaultRan = true;
            						}
HXLINE( 536)						this->args->push(arg3);
            					}
            				}
            				else {
HXLINE( 538)					bool _hx_tmp1;
HXDLIN( 538)					if ((arg3.length > (int)2)) {
HXLINE( 538)						_hx_tmp1 = hx::IsNotEq( arg3.charCodeAt((int)1),(int)45 );
            					}
            					else {
HXLINE( 538)						_hx_tmp1 = false;
            					}
HXDLIN( 538)					if (_hx_tmp1) {
            						HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            						::String _hx_run(::String v2){
            							HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_539__dispatch)
HXLINE( 539)							return (HX_("-",2d,00,00,00) + v2);
            						}
            						HX_END_LOCAL_FUNC1(return)

HXLINE( 539)						::Array< ::String > a2 = arg3.substr((int)1,null()).split(HX_("",00,00,00,00))->map( ::Dynamic(new _hx_Closure_3()));
HXLINE( 540)						a2->reverse();
HXLINE( 541)						this->args = this->args->concat(a2);
HXLINE( 542)						continue;
            					}
            				}
            			}
HXLINE( 545)			if (hx::IsNull( argDef1 )) {
HXLINE( 546)				if (hx::IsNotNull( arg3 )) {
HXLINE( 547)					bool _hx_tmp2;
HXDLIN( 547)					bool _hx_tmp3;
HXDLIN( 547)					if ((didCall->__get((int)0) == false)) {
HXLINE( 547)						_hx_tmp3 = !(v->_preventDefault);
            					}
            					else {
HXLINE( 547)						_hx_tmp3 = false;
            					}
HXDLIN( 547)					if (!(_hx_tmp3)) {
HXLINE( 547)						_hx_tmp2 = (this->depth == (int)1);
            					}
            					else {
HXLINE( 547)						_hx_tmp2 = true;
            					}
HXDLIN( 547)					if (_hx_tmp2) {
HXLINE( 549)						HX_STACK_DO_THROW(::mcli::DispatchError_obj::UnknownArgument(arg3));
            					}
            					else {
HXLINE( 551)						this->args->push(arg3);
HXLINE( 552)						goto _hx_goto_12;
            					}
            				}
            				else {
HXLINE( 556)					HX_STACK_DO_THROW(::mcli::DispatchError_obj::MissingArgument_dyn());
            				}
            			}
HXLINE( 558)			runArgument(arg3,argDef1);
            		}
            		_hx_goto_12:;
HXLINE( 561)		::String defaultAlias = ( (::String)(getDefaultAlias()) );
HXLINE( 562)		 ::Dynamic argDef2 = names->get(defaultAlias);
HXLINE( 564)		{
HXLINE( 564)			int _g6 = (int)0;
HXDLIN( 564)			while((_g6 < delays->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->length)){
HXLINE( 564)				 ::Dynamic d1 = delays->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->__get(_g6);
HXDLIN( 564)				_g6 = (_g6 + (int)1);
HXDLIN( 564)				d1();
            			}
            		}
HXLINE( 565)		delays[(int)0] = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 566)		if (hx::IsNull( argDef2 )) {
HXLINE( 568)			if (!(didCall->__get((int)0))) {
HXLINE( 569)				HX_STACK_DO_THROW(::mcli::DispatchError_obj::MissingArgument_dyn());
            			}
            		}
            		else {
HXLINE( 571)			bool _hx_tmp4;
HXDLIN( 571)			if (!(didCall->__get((int)0))) {
HXLINE( 571)				_hx_tmp4 = !(v->_preventDefault);
            			}
            			else {
HXLINE( 571)				_hx_tmp4 = false;
            			}
HXDLIN( 571)			if (_hx_tmp4) {
HXLINE( 573)				runArgument(defaultAlias,argDef2);
            			}
            			else {
HXLINE( 574)				bool _hx_tmp5;
HXDLIN( 574)				if (!(defaultRan)) {
HXLINE( 574)					_hx_tmp5 = !(v->_preventDefault);
            				}
            				else {
HXLINE( 574)					_hx_tmp5 = false;
            				}
HXDLIN( 574)				if (_hx_tmp5) {
HXLINE( 574)					 ::mcli::internal::Kind _g7 = argDef2->__Field(HX_("kind",54,e1,09,47),hx::paccDynamic);
HXDLIN( 574)					if ((_hx_getEnumValueIndex(_g7) == (int)4)) {
            						HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            						bool _hx_run( ::Dynamic a3){
            							HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_575__dispatch)
HXLINE( 575)							return !(( (bool)(a3->__Field(HX_("opt",33,9c,54,00),hx::paccDynamic)) ));
            						}
            						HX_END_LOCAL_FUNC1(return)

HXLINE( 575)						::Array< ::Dynamic> args = _g7->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 575)						if (!(::Lambda_obj::exists(args, ::Dynamic(new _hx_Closure_4())))) {
HXLINE( 576)							runArgument(defaultAlias,argDef2);
            						}
            					}
            				}
            			}
            		}
HXLINE( 580)		{
HXLINE( 580)			int _g8 = (int)0;
HXDLIN( 580)			while((_g8 < delays->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->length)){
HXLINE( 580)				 ::Dynamic d2 = delays->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->__get(_g8);
HXDLIN( 580)				_g8 = (_g8 + (int)1);
HXDLIN( 580)				d2();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Dispatch_obj,_dispatch,(void))

::String Dispatch_obj::argToString( ::Dynamic arg,hx::Null< int >  __o_argSize, ::Dynamic screenSize){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(::String s1,::String s2){
            			HX_STACKFRAME(&_hx_pos_42d66b67fb9d7178_33_argToString)
HXLINE(  33)			return ::Reflect_obj::compare(s1.length,s2.length);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		::String _hx_run(::String v){
            			HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_39_argToString)
HXLINE(  39)			return v;
            		}
            		HX_END_LOCAL_FUNC1(return)

int argSize = __o_argSize.Default(30);
            	HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_22_argToString)
HXLINE(  23)		if (hx::IsNull( screenSize )) {
HXLINE(  24)			screenSize = ::mcli::Dispatch_obj::getScreenSize(null());
            		}
HXLINE(  25)		::String postfix = ::mcli::Dispatch_obj::getPostfix(arg);
HXLINE(  26)		::Array< ::String > versions = ::mcli::Dispatch_obj::getAliases(arg);
HXLINE(  28)		if ((versions->length == (int)0)) {
HXLINE(  29)			if (hx::IsNotNull( ( (::String)(arg->__Field(HX_("description",fc,08,1d,5f),hx::paccDynamic)) ) )) {
HXLINE(  30)				return ( (::String)(arg->__Field(HX_("description",fc,08,1d,5f),hx::paccDynamic)) );
            			}
            			else {
HXLINE(  32)				return HX_("",00,00,00,00);
            			}
            		}
HXLINE(  33)		versions->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE(  35)		::String desc;
HXDLIN(  35)		if (hx::IsNotNull( ( (::String)(arg->__Field(HX_("description",fc,08,1d,5f),hx::paccDynamic)) ) )) {
HXLINE(  35)			desc = ( (::String)(arg->__Field(HX_("description",fc,08,1d,5f),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  35)			desc = HX_("",00,00,00,00);
            		}
HXLINE(  37)		 ::StringBuf ret =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  38)		{
HXLINE(  38)			if (hx::IsNotNull( ret->charBuf )) {
HXLINE(  38)				ret->flush();
            			}
HXDLIN(  38)			if (hx::IsNull( ret->b )) {
HXLINE(  38)				ret->b = ::Array_obj< ::String >::fromData( _hx_array_data_3bd3a755_28,1);
            			}
            			else {
HXLINE(  38)				ret->b->push(HX_("  ",00,1c,00,00));
            			}
            		}
HXLINE(  39)		::String argsTxt = ::StringTools_obj::rpad((versions->map( ::Dynamic(new _hx_Closure_1()))->join(HX_(", ",74,26,00,00)) + postfix),HX_(" ",20,00,00,00),argSize);
HXLINE(  40)		{
HXLINE(  40)			if (hx::IsNotNull( ret->charBuf )) {
HXLINE(  40)				ret->flush();
            			}
HXDLIN(  40)			if (hx::IsNull( ret->b )) {
HXLINE(  40)				ret->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(argsTxt));
            			}
            			else {
HXLINE(  40)				::Array< ::String > ret1 = ret->b;
HXDLIN(  40)				ret1->push(::Std_obj::string(argsTxt));
            			}
            		}
HXLINE(  41)		if ((argsTxt.length > argSize)) {
HXLINE(  43)			{
HXLINE(  43)				if (hx::IsNotNull( ret->charBuf )) {
HXLINE(  43)					ret->flush();
            				}
HXDLIN(  43)				if (hx::IsNull( ret->b )) {
HXLINE(  43)					ret->b = ::Array_obj< ::String >::fromData( _hx_array_data_3bd3a755_29,1);
            				}
            				else {
HXLINE(  43)					ret->b->push(HX_("\n",0a,00,00,00));
            				}
            			}
HXLINE(  44)			{
HXLINE(  44)				int _g1 = (int)0;
HXDLIN(  44)				int _g = argSize;
HXDLIN(  44)				while((_g1 < _g)){
HXLINE(  44)					_g1 = (_g1 + (int)1);
HXDLIN(  44)					int i = (_g1 - (int)1);
HXLINE(  45)					{
HXLINE(  45)						if (hx::IsNotNull( ret->charBuf )) {
HXLINE(  45)							ret->flush();
            						}
HXDLIN(  45)						if (hx::IsNull( ret->b )) {
HXLINE(  45)							ret->b = ::Array_obj< ::String >::fromData( _hx_array_data_3bd3a755_30,1);
            						}
            						else {
HXLINE(  45)							ret->b->push(HX_(" ",20,00,00,00));
            						}
            					}
            				}
            			}
            		}
HXLINE(  48)		{
HXLINE(  48)			if (hx::IsNotNull( ret->charBuf )) {
HXLINE(  48)				ret->flush();
            			}
HXDLIN(  48)			if (hx::IsNull( ret->b )) {
HXLINE(  48)				ret->b = ::Array_obj< ::String >::fromData( _hx_array_data_3bd3a755_31,1);
            			}
            			else {
HXLINE(  48)				ret->b->push(HX_("   ",20,64,18,00));
            			}
            		}
HXLINE(  49)		if (hx::IsNotNull( ( (::String)(arg->__Field(HX_("description",fc,08,1d,5f),hx::paccDynamic)) ) )) {
HXLINE(  50)			::String x = ( (::String)(arg->__Field(HX_("description",fc,08,1d,5f),hx::paccDynamic)) );
HXDLIN(  50)			if (hx::IsNotNull( ret->charBuf )) {
HXLINE(  50)				ret->flush();
            			}
HXDLIN(  50)			if (hx::IsNull( ret->b )) {
HXLINE(  50)				ret->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            			}
            			else {
HXLINE(  50)				::Array< ::String > ret2 = ret->b;
HXDLIN(  50)				ret2->push(::Std_obj::string(x));
            			}
            		}
HXLINE(  51)		::String consolidated = ret->toString();
HXLINE(  52)		bool inNewline = false;
HXLINE(  53)		if (hx::IsGreater( consolidated.length,screenSize )) {
HXLINE(  55)			ret =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  56)			::Array< ::String > c = consolidated.split(HX_(" ",20,00,00,00));
HXDLIN(  56)			int ccount = (int)0;
HXLINE(  57)			{
HXLINE(  57)				int _g2 = (int)0;
HXDLIN(  57)				while((_g2 < c->length)){
HXLINE(  57)					::String word = c->__get(_g2);
HXDLIN(  57)					_g2 = (_g2 + (int)1);
HXLINE(  59)					bool _hx_tmp;
HXDLIN(  59)					if (inNewline) {
HXLINE(  59)						_hx_tmp = (word == HX_("",00,00,00,00));
            					}
            					else {
HXLINE(  59)						_hx_tmp = false;
            					}
HXDLIN(  59)					if (_hx_tmp) {
HXLINE(  60)						continue;
            					}
            					else {
HXLINE(  62)						inNewline = false;
            					}
HXLINE(  63)					ccount = (ccount + (word.length + (int)1));
HXLINE(  64)					if (hx::IsGreaterEq( ccount,screenSize )) {
HXLINE(  66)						{
HXLINE(  66)							if (hx::IsNull( ret->charBuf )) {
HXLINE(  66)								ret->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(  66)							ret->charBuf->push((int)10);
            						}
HXLINE(  67)						{
HXLINE(  67)							int _g21 = (int)0;
HXDLIN(  67)							int _g11 = (argSize + (int)7);
HXDLIN(  67)							while((_g21 < _g11)){
HXLINE(  67)								_g21 = (_g21 + (int)1);
HXDLIN(  67)								int i1 = (_g21 - (int)1);
HXLINE(  68)								{
HXLINE(  68)									if (hx::IsNotNull( ret->charBuf )) {
HXLINE(  68)										ret->flush();
            									}
HXDLIN(  68)									if (hx::IsNull( ret->b )) {
HXLINE(  68)										ret->b = ::Array_obj< ::String >::fromData( _hx_array_data_3bd3a755_32,1);
            									}
            									else {
HXLINE(  68)										ret->b->push(HX_(" ",20,00,00,00));
            									}
            								}
            							}
            						}
HXLINE(  69)						ccount = (((word.length + (int)1) + argSize) + (int)8);
HXLINE(  70)						inNewline = true;
HXLINE(  71)						if ((word == HX_("",00,00,00,00))) {
HXLINE(  71)							continue;
            						}
            					}
HXLINE(  73)					{
HXLINE(  73)						if (hx::IsNotNull( ret->charBuf )) {
HXLINE(  73)							ret->flush();
            						}
HXDLIN(  73)						if (hx::IsNull( ret->b )) {
HXLINE(  73)							ret->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(word));
            						}
            						else {
HXLINE(  73)							::Array< ::String > ret3 = ret->b;
HXDLIN(  73)							ret3->push(::Std_obj::string(word));
            						}
            					}
HXLINE(  74)					{
HXLINE(  74)						if (hx::IsNotNull( ret->charBuf )) {
HXLINE(  74)							ret->flush();
            						}
HXDLIN(  74)						if (hx::IsNull( ret->b )) {
HXLINE(  74)							ret->b = ::Array_obj< ::String >::fromData( _hx_array_data_3bd3a755_33,1);
            						}
            						else {
HXLINE(  74)							ret->b->push(HX_(" ",20,00,00,00));
            						}
            					}
            				}
            			}
HXLINE(  76)			return ret->toString();
            		}
            		else {
HXLINE(  78)			return consolidated;
            		}
HXLINE(  53)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Dispatch_obj,argToString,return )

::String Dispatch_obj::showUsageOf(::Array< ::Dynamic> args, ::Dynamic screenSize){
            	HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_87_showUsageOf)
HXLINE(  88)		if (hx::IsNull( screenSize )) {
HXLINE(  89)			screenSize = ::mcli::Dispatch_obj::getScreenSize(null());
            		}
HXLINE(  90)		int maxSize = (int)0;
HXLINE(  91)		{
HXLINE(  91)			int _g = (int)0;
HXDLIN(  91)			while((_g < args->length)){
HXLINE(  91)				 ::Dynamic arg = args->__get(_g);
HXDLIN(  91)				_g = (_g + (int)1);
HXLINE(  93)				if ((( (::String)(arg->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == HX_("runDefault",b6,68,40,06))) {
HXLINE(  93)					continue;
            				}
HXLINE(  94)				int postfixSize = ::mcli::Dispatch_obj::getPostfix(arg).length;
HXLINE(  95)				int size = ((( (::String)(arg->__Field(HX_("command",4b,71,6d,81),hx::paccDynamic)) ).length + postfixSize) + (int)3);
HXLINE(  96)				if (hx::IsNotNull( ( (::Array< ::String >)(arg->__Field(HX_("aliases",fe,2d,b5,a5),hx::paccDynamic)) ) )) {
HXLINE(  96)					int _g1 = (int)0;
HXDLIN(  96)					::Array< ::String > _g2 = ( (::Array< ::String >)(arg->__Field(HX_("aliases",fe,2d,b5,a5),hx::paccDynamic)) );
HXDLIN(  96)					while((_g1 < _g2->length)){
HXLINE(  96)						::String a = _g2->__get(_g1);
HXDLIN(  96)						_g1 = (_g1 + (int)1);
HXLINE(  98)						size = (size + (a.length + (int)3));
            					}
            				}
HXLINE( 101)				if ((size > maxSize)) {
HXLINE( 102)					maxSize = size;
            				}
            			}
            		}
HXLINE( 105)		if ((maxSize > ((Float)screenSize / (Float)((Float)2.5)))) {
HXLINE( 105)			maxSize = ::Std_obj::_hx_int(((Float)screenSize / (Float)((Float)2.5)));
            		}
HXLINE( 106)		 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 107)		{
HXLINE( 107)			int _g3 = (int)0;
HXDLIN( 107)			while((_g3 < args->length)){
HXLINE( 107)				 ::Dynamic arg1 = args->__get(_g3);
HXDLIN( 107)				_g3 = (_g3 + (int)1);
HXLINE( 109)				if ((( (::String)(arg1->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == HX_("runDefault",b6,68,40,06))) {
HXLINE( 109)					continue;
            				}
HXLINE( 110)				::String str = ::mcli::Dispatch_obj::argToString(arg1,maxSize,screenSize);
HXLINE( 111)				if ((str.length > (int)0)) {
HXLINE( 113)					{
HXLINE( 113)						if (hx::IsNotNull( buf->charBuf )) {
HXLINE( 113)							buf->flush();
            						}
HXDLIN( 113)						if (hx::IsNull( buf->b )) {
HXLINE( 113)							buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(str));
            						}
            						else {
HXLINE( 113)							::Array< ::String > buf1 = buf->b;
HXDLIN( 113)							buf1->push(::Std_obj::string(str));
            						}
            					}
HXLINE( 114)					{
HXLINE( 114)						if (hx::IsNull( buf->charBuf )) {
HXLINE( 114)							buf->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN( 114)						buf->charBuf->push((int)10);
            					}
            				}
            			}
            		}
HXLINE( 117)		return buf->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dispatch_obj,showUsageOf,return )

 ::Dynamic Dispatch_obj::getScreenSize(hx::Null< int >  __o_defaultSize){
int defaultSize = __o_defaultSize.Default(80);
            	HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_121_getScreenSize)
HXLINE( 123)		 ::Dynamic cols = null();
HXLINE( 124)		cols = ::Std_obj::parseInt(::Sys_obj::getEnv(HX_("COLUNNS",fe,42,2e,73)));
HXLINE( 125)		if (hx::IsNotNull( cols )) {
HXLINE( 126)			return cols;
            		}
HXLINE( 127)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 129)			 ::sys::io::Process proc =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("resize",f4,59,7b,08),::Array_obj< ::String >::__new(0));
HXLINE( 130)			 ::haxe::io::Input i = proc->_hx_stdout;
HXLINE( 131)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 133)				while(true){
HXLINE( 135)					::String ln = ::StringTools_obj::trim(i->readLine());
HXLINE( 136)					if (::StringTools_obj::startsWith(ln,HX_("COLUMNS=",e0,24,a3,54))) {
HXLINE( 138)						cols = ::Std_obj::parseInt(ln.split(HX_("=",3d,00,00,00))->__get((int)1));
HXLINE( 139)						goto _hx_goto_38;
            					}
            				}
            				_hx_goto_38:;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof e = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 145)			proc->close();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e1 = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 150)		if (hx::IsNull( cols )) {
HXLINE( 151)			return defaultSize;
            		}
            		else {
HXLINE( 153)			return cols;
            		}
HXLINE( 150)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dispatch_obj,getScreenSize,return )

::Array< ::String > Dispatch_obj::getAliases( ::Dynamic arg){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run(::String s){
            			HX_STACKFRAME(&_hx_pos_42d66b67fb9d7178_162_getAliases)
HXLINE( 162)			if (hx::IsNotNull( s )) {
HXLINE( 162)				return (s != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 162)				return false;
            			}
HXDLIN( 162)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_42d66b67fb9d7178_160_getAliases)
HXLINE( 161)		::Array< ::String > versions;
HXDLIN( 161)		if (hx::IsNotNull( ( (::Array< ::String >)(arg->__Field(HX_("aliases",fe,2d,b5,a5),hx::paccDynamic)) ) )) {
HXLINE( 161)			versions = ( (::Array< ::String >)(arg->__Field(HX_("aliases",fe,2d,b5,a5),hx::paccDynamic)) )->concat(::Array_obj< ::String >::__new(1)->init(0, ::Dynamic(arg->__Field(HX_("command",4b,71,6d,81),hx::paccDynamic))));
            		}
            		else {
HXLINE( 161)			versions = ::Array_obj< ::String >::__new(1)->init(0, ::Dynamic(arg->__Field(HX_("command",4b,71,6d,81),hx::paccDynamic)));
            		}
HXLINE( 162)		versions = versions->filter( ::Dynamic(new _hx_Closure_0()));
HXLINE( 164)		::String prefix = HX_("-",2d,00,00,00);
HXLINE( 165)		bool _hx_tmp;
HXDLIN( 165)		if (hx::IsNotEq( arg->__Field(HX_("kind",54,e1,09,47),hx::paccDynamic),::mcli::internal::Kind_obj::SubDispatch_dyn() )) {
HXLINE( 165)			_hx_tmp = hx::IsEq( arg->__Field(HX_("kind",54,e1,09,47),hx::paccDynamic),::mcli::internal::Kind_obj::Message_dyn() );
            		}
            		else {
HXLINE( 165)			_hx_tmp = true;
            		}
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 166)			prefix = HX_("",00,00,00,00);
            		}
HXLINE( 167)		::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 167)		{
HXLINE( 167)			int _g1 = (int)0;
HXDLIN( 167)			while((_g1 < versions->length)){
HXLINE( 167)				::String v = versions->__get(_g1);
HXDLIN( 167)				_g1 = (_g1 + (int)1);
HXDLIN( 167)				::String _hx_tmp1;
HXDLIN( 167)				if ((v.length == (int)1)) {
HXLINE( 167)					_hx_tmp1 = (prefix + ::mcli::internal::Tools_obj::toDashSep(v));
            				}
            				else {
HXLINE( 167)					_hx_tmp1 = ((prefix + prefix) + ::mcli::internal::Tools_obj::toDashSep(v));
            				}
HXDLIN( 167)				_g->push(_hx_tmp1);
            			}
            		}
HXDLIN( 167)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dispatch_obj,getAliases,return )

::String Dispatch_obj::getPostfix( ::Dynamic arg){
            	HX_STACKFRAME(&_hx_pos_42d66b67fb9d7178_172_getPostfix)
HXDLIN( 172)		 ::mcli::internal::Kind _g = arg->__Field(HX_("kind",54,e1,09,47),hx::paccDynamic);
HXDLIN( 172)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)2: {
HXLINE( 174)				 ::Dynamic v = _g->_hx_getObject(1);
HXDLIN( 174)				 ::Dynamic k = _g->_hx_getObject(0);
HXLINE( 175)				return ((((HX_(" ",20,00,00,00) + ( (::String)(k->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) )) + HX_("[=",82,4f,00,00)) + ( (::String)(v->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) )) + HX_("]",5d,00,00,00));
            			}
            			break;
            			case (int)3: {
HXLINE( 177)				return ((HX_(" <",1c,1c,00,00) + ( (::String)(arg->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) )) + HX_(">",3e,00,00,00));
            			}
            			break;
            			case (int)4: {
HXLINE( 178)				::String vargs = _g->_hx_getString(1);
HXDLIN( 178)				::Array< ::Dynamic> args = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 179)				::String postfix = HX_("",00,00,00,00);
HXLINE( 180)				{
HXLINE( 180)					int _g1 = (int)0;
HXDLIN( 180)					while((_g1 < args->length)){
HXLINE( 180)						 ::Dynamic arg1 = args->__get(_g1);
HXDLIN( 180)						_g1 = (_g1 + (int)1);
HXLINE( 181)						::String postfix1;
HXDLIN( 181)						if (( (bool)(arg1->__Field(HX_("opt",33,9c,54,00),hx::paccDynamic)) )) {
HXLINE( 181)							postfix1 = HX_(" [",3b,1c,00,00);
            						}
            						else {
HXLINE( 181)							postfix1 = HX_(" <",1c,1c,00,00);
            						}
HXDLIN( 181)						::String postfix2 = (postfix1 + ::mcli::internal::Tools_obj::toDashSep(( (::String)(arg1->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) )));
HXDLIN( 181)						::String postfix3;
HXDLIN( 181)						if (( (bool)(arg1->__Field(HX_("opt",33,9c,54,00),hx::paccDynamic)) )) {
HXLINE( 181)							postfix3 = HX_("]",5d,00,00,00);
            						}
            						else {
HXLINE( 181)							postfix3 = HX_(">",3e,00,00,00);
            						}
HXDLIN( 181)						postfix = (postfix + (postfix2 + postfix3));
            					}
            				}
HXLINE( 182)				if (hx::IsNotNull( vargs )) {
HXLINE( 183)					postfix = (postfix + HX_(" [arg1 [arg2 ...[argN]]]",45,f5,73,e3));
            				}
HXLINE( 184)				return postfix;
            			}
            			break;
            			default:{
HXLINE( 186)				return HX_("",00,00,00,00);
            			}
            		}
HXLINE( 172)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dispatch_obj,getPostfix,return )

 ::haxe::ds::StringMap Dispatch_obj::decoders;

void Dispatch_obj::addDecoderRuntime(::String name, ::Dynamic d){
            	HX_GC_STACKFRAME(&_hx_pos_42d66b67fb9d7178_243_addDecoderRuntime)
HXLINE( 244)		if (hx::IsNull( ::mcli::Dispatch_obj::decoders )) {
HXLINE( 245)			::mcli::Dispatch_obj::decoders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 246)		::mcli::Dispatch_obj::decoders->set(name,d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dispatch_obj,addDecoderRuntime,(void))

 ::Dynamic Dispatch_obj::decode(::String a,::String type){
            	HX_STACKFRAME(&_hx_pos_42d66b67fb9d7178_251_decode)
HXDLIN( 251)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("Float",7c,35,c4,95)) ){
HXLINE( 258)			Float ret = ::Std_obj::parseFloat(a);
HXLINE( 259)			if (::Math_obj::isNaN(ret)) {
HXLINE( 260)				HX_STACK_DO_THROW(::mcli::DispatchError_obj::ArgumentFormatError(type,a));
            			}
HXLINE( 261)			return ret;
HXLINE( 257)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("Int",cf,c4,37,00)) ){
HXLINE( 254)			 ::Dynamic ret1 = ::Std_obj::parseInt(a);
HXLINE( 255)			if (hx::IsNull( ret1 )) {
HXLINE( 255)				HX_STACK_DO_THROW(::mcli::DispatchError_obj::ArgumentFormatError(type,a));
            			}
HXLINE( 256)			return ret1;
HXLINE( 253)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("String",f1,9c,c4,45)) ){
HXLINE( 263)			return a;
HXDLIN( 263)			goto _hx_goto_47;
            		}
            		/* default */{
HXLINE( 265)			 ::Dynamic d;
HXDLIN( 265)			if (hx::IsNotNull( ::mcli::Dispatch_obj::decoders )) {
HXLINE( 265)				d = ::haxe::IMap_obj::get(::mcli::Dispatch_obj::decoders,type);
            			}
            			else {
HXLINE( 265)				d = null();
            			}
HXLINE( 266)			if (hx::IsNull( d )) {
HXLINE( 268)				hx::Class dt = ::Type_obj::resolveClass(type);
HXLINE( 269)				bool _hx_tmp;
HXDLIN( 269)				if (hx::IsNotNull( dt )) {
HXLINE( 269)					_hx_tmp = ::Reflect_obj::hasField(dt,HX_("fromString",db,2d,74,54));
            				}
            				else {
HXLINE( 269)					_hx_tmp = false;
            				}
HXDLIN( 269)				if (_hx_tmp) {
HXLINE( 270)					d = dt;
            				}
            			}
HXLINE( 272)			if (hx::IsNull( d )) {
HXLINE( 274)				hx::Class dt2 = ::Type_obj::resolveClass((type + HX_("Decoder",64,53,15,b8)));
HXLINE( 275)				bool _hx_tmp1;
HXDLIN( 275)				if (hx::IsNotNull( dt2 )) {
HXLINE( 275)					_hx_tmp1 = ::Reflect_obj::hasField(dt2,HX_("fromString",db,2d,74,54));
            				}
            				else {
HXLINE( 275)					_hx_tmp1 = false;
            				}
HXDLIN( 275)				if (_hx_tmp1) {
HXLINE( 276)					d = dt2;
            				}
            			}
HXLINE( 278)			if (hx::IsNull( d )) {
HXLINE( 280)				hx::Class e = ::Type_obj::resolveEnum(type);
HXLINE( 281)				if (hx::IsNotNull( e )) {
HXLINE( 283)					::cpp::VirtualArray all = ::Type_obj::allEnums(e);
HXLINE( 284)					bool _hx_tmp2;
HXDLIN( 284)					if ((all->get_length() > (int)0)) {
HXLINE( 284)						int all1 = all->get_length();
HXDLIN( 284)						_hx_tmp2 = (all1 == ::Type_obj::getEnumConstructs(e)->length);
            					}
            					else {
HXLINE( 284)						_hx_tmp2 = false;
            					}
HXDLIN( 284)					if (_hx_tmp2) {
HXLINE( 286)						{
HXLINE( 286)							int _g = (int)0;
HXDLIN( 286)							while((_g < all->get_length())){
HXLINE( 286)								 ::Dynamic v = all->__get(_g);
HXDLIN( 286)								_g = (_g + (int)1);
HXLINE( 288)								if ((a == ::mcli::internal::Tools_obj::toDashSep(::Std_obj::string(v)))) {
HXLINE( 289)									return v;
            								}
            							}
            						}
HXLINE( 291)						HX_STACK_DO_THROW(::mcli::DispatchError_obj::ArgumentFormatError(type,a));
            					}
            				}
            			}
HXLINE( 296)			if (hx::IsNull( d )) {
HXLINE( 296)				HX_STACK_DO_THROW(::mcli::DispatchError_obj::DecoderNotFound(type));
            			}
HXLINE( 297)			return d->__Field(HX_("fromString",db,2d,74,54),hx::paccDynamic)(a);
            		}
            		_hx_goto_47:;
HXLINE( 251)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dispatch_obj,decode,return )

bool Dispatch_obj::isArgument(::String str){
            	HX_STACKFRAME(&_hx_pos_42d66b67fb9d7178_330_isArgument)
HXLINE( 331)		if (hx::IsEq( str.charCodeAt((int)0),(int)45 )) {
HXLINE( 333)			 ::Dynamic code = str.charCodeAt((int)1);
HXLINE( 334)			bool _hx_tmp;
HXDLIN( 334)			bool _hx_tmp1;
HXDLIN( 334)			if (hx::IsGreaterEq( code,(int)48 )) {
HXLINE( 334)				_hx_tmp1 = hx::IsLessEq( code,(int)57 );
            			}
            			else {
HXLINE( 334)				_hx_tmp1 = false;
            			}
HXDLIN( 334)			if (!(_hx_tmp1)) {
HXLINE( 334)				_hx_tmp = hx::IsEq( code,(int)46 );
            			}
            			else {
HXLINE( 334)				_hx_tmp = true;
            			}
HXDLIN( 334)			if (_hx_tmp) {
HXLINE( 335)				return false;
            			}
            			else {
HXLINE( 337)				return true;
            			}
            		}
HXLINE( 339)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dispatch_obj,isArgument,return )


hx::ObjectPtr< Dispatch_obj > Dispatch_obj::__new(::Array< ::String > args) {
	hx::ObjectPtr< Dispatch_obj > __this = new Dispatch_obj();
	__this->__construct(args);
	return __this;
}

hx::ObjectPtr< Dispatch_obj > Dispatch_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::String > args) {
	Dispatch_obj *__this = (Dispatch_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Dispatch_obj), true, "mcli.Dispatch"));
	*(void **)__this = Dispatch_obj::_hx_vtable;
	__this->__construct(args);
	return __this;
}

Dispatch_obj::Dispatch_obj()
{
}

void Dispatch_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Dispatch);
	HX_MARK_MEMBER_NAME(args,"args");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_END_CLASS();
}

void Dispatch_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(args,"args");
	HX_VISIT_MEMBER_NAME(depth,"depth");
}

hx::Val Dispatch_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"args") ) { return hx::Val( args ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( depth ); }
		if (HX_FIELD_EQ(inName,"errln") ) { return hx::Val( errln_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"println") ) { return hx::Val( println_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dispatch") ) { return hx::Val( dispatch_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_dispatch") ) { return hx::Val( _dispatch_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Dispatch_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"decode") ) { outValue = decode_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"decoders") ) { outValue = ( decoders ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getAliases") ) { outValue = getAliases_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPostfix") ) { outValue = getPostfix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isArgument") ) { outValue = isArgument_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"argToString") ) { outValue = argToString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"showUsageOf") ) { outValue = showUsageOf_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getScreenSize") ) { outValue = getScreenSize_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"addDecoderRuntime") ) { outValue = addDecoderRuntime_dyn(); return true; }
	}
	return false;
}

hx::Val Dispatch_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"args") ) { args=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Dispatch_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"decoders") ) { decoders=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void Dispatch_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("args","\x5d","\x8d","\x74","\x40"));
	outFields->push(HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Dispatch_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Dispatch_obj,args),HX_HCSTRING("args","\x5d","\x8d","\x74","\x40")},
	{hx::fsInt,(int)offsetof(Dispatch_obj,depth),HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Dispatch_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Dispatch_obj::decoders,HX_HCSTRING("decoders","\x6f","\xe8","\xe1","\x80")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Dispatch_obj_sMemberFields[] = {
	HX_HCSTRING("args","\x5d","\x8d","\x74","\x40"),
	HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"),
	HX_HCSTRING("errln","\x27","\xc9","\x29","\x73"),
	HX_HCSTRING("println","\xef","\xdb","\x33","\x84"),
	HX_HCSTRING("dispatch","\xba","\xce","\x63","\x1e"),
	HX_HCSTRING("_dispatch","\x19","\xc6","\xf9","\x65"),
	::String(null()) };

static void Dispatch_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Dispatch_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Dispatch_obj::decoders,"decoders");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Dispatch_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Dispatch_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Dispatch_obj::decoders,"decoders");
};

#endif

hx::Class Dispatch_obj::__mClass;

static ::String Dispatch_obj_sStaticFields[] = {
	HX_HCSTRING("argToString","\x22","\xd1","\xb1","\x66"),
	HX_HCSTRING("showUsageOf","\x1b","\x89","\x35","\xf7"),
	HX_HCSTRING("getScreenSize","\x83","\x8a","\xfc","\x20"),
	HX_HCSTRING("getAliases","\x08","\xb4","\x16","\xf5"),
	HX_HCSTRING("getPostfix","\x7f","\xbf","\x71","\x66"),
	HX_HCSTRING("decoders","\x6f","\xe8","\xe1","\x80"),
	HX_HCSTRING("addDecoderRuntime","\xb5","\x87","\x6e","\xb3"),
	HX_HCSTRING("decode","\x2e","\x5d","\xed","\x64"),
	HX_HCSTRING("isArgument","\x87","\x80","\x58","\x80"),
	::String(null())
};

void Dispatch_obj::__register()
{
	hx::Object *dummy = new Dispatch_obj;
	Dispatch_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("mcli.Dispatch","\x55","\xa7","\xd3","\x3b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Dispatch_obj::__GetStatic;
	__mClass->mSetStaticField = &Dispatch_obj::__SetStatic;
	__mClass->mMarkFunc = Dispatch_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Dispatch_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Dispatch_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Dispatch_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Dispatch_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Dispatch_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Dispatch_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mcli
