// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_mcli_DispatchError
#include <mcli/DispatchError.h>
#endif
namespace mcli{

::mcli::DispatchError DispatchError_obj::ArgumentFormatError(::String type,::String passed)
{
	return hx::CreateEnum< DispatchError_obj >(HX_("ArgumentFormatError",74,0d,5d,43),1,2)->_hx_init(0,type)->_hx_init(1,passed);
}

::mcli::DispatchError DispatchError_obj::DecoderNotFound(::String type)
{
	return hx::CreateEnum< DispatchError_obj >(HX_("DecoderNotFound",b3,e7,c4,6e),2,1)->_hx_init(0,type);
}

::mcli::DispatchError DispatchError_obj::MissingArgument;

::mcli::DispatchError DispatchError_obj::MissingOptionArgument(::String opt,::String name)
{
	return hx::CreateEnum< DispatchError_obj >(HX_("MissingOptionArgument",f8,64,95,d6),3,2)->_hx_init(0,opt)->_hx_init(1,name);
}

::mcli::DispatchError DispatchError_obj::TooManyArguments;

::mcli::DispatchError DispatchError_obj::UnknownArgument(::String arg)
{
	return hx::CreateEnum< DispatchError_obj >(HX_("UnknownArgument",07,f0,df,4b),0,1)->_hx_init(0,arg);
}

bool DispatchError_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ArgumentFormatError",74,0d,5d,43)) { outValue = DispatchError_obj::ArgumentFormatError_dyn(); return true; }
	if (inName==HX_("DecoderNotFound",b3,e7,c4,6e)) { outValue = DispatchError_obj::DecoderNotFound_dyn(); return true; }
	if (inName==HX_("MissingArgument",e3,c7,f2,c0)) { outValue = DispatchError_obj::MissingArgument; return true; }
	if (inName==HX_("MissingOptionArgument",f8,64,95,d6)) { outValue = DispatchError_obj::MissingOptionArgument_dyn(); return true; }
	if (inName==HX_("TooManyArguments",a3,0f,ac,15)) { outValue = DispatchError_obj::TooManyArguments; return true; }
	if (inName==HX_("UnknownArgument",07,f0,df,4b)) { outValue = DispatchError_obj::UnknownArgument_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(DispatchError_obj)

int DispatchError_obj::__FindIndex(::String inName)
{
	if (inName==HX_("ArgumentFormatError",74,0d,5d,43)) return 1;
	if (inName==HX_("DecoderNotFound",b3,e7,c4,6e)) return 2;
	if (inName==HX_("MissingArgument",e3,c7,f2,c0)) return 4;
	if (inName==HX_("MissingOptionArgument",f8,64,95,d6)) return 3;
	if (inName==HX_("TooManyArguments",a3,0f,ac,15)) return 5;
	if (inName==HX_("UnknownArgument",07,f0,df,4b)) return 0;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC2(DispatchError_obj,ArgumentFormatError,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(DispatchError_obj,DecoderNotFound,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(DispatchError_obj,MissingOptionArgument,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(DispatchError_obj,UnknownArgument,return)

int DispatchError_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("ArgumentFormatError",74,0d,5d,43)) return 2;
	if (inName==HX_("DecoderNotFound",b3,e7,c4,6e)) return 1;
	if (inName==HX_("MissingArgument",e3,c7,f2,c0)) return 0;
	if (inName==HX_("MissingOptionArgument",f8,64,95,d6)) return 2;
	if (inName==HX_("TooManyArguments",a3,0f,ac,15)) return 0;
	if (inName==HX_("UnknownArgument",07,f0,df,4b)) return 1;
	return super::__FindArgCount(inName);
}

hx::Val DispatchError_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ArgumentFormatError",74,0d,5d,43)) return ArgumentFormatError_dyn();
	if (inName==HX_("DecoderNotFound",b3,e7,c4,6e)) return DecoderNotFound_dyn();
	if (inName==HX_("MissingArgument",e3,c7,f2,c0)) return MissingArgument;
	if (inName==HX_("MissingOptionArgument",f8,64,95,d6)) return MissingOptionArgument_dyn();
	if (inName==HX_("TooManyArguments",a3,0f,ac,15)) return TooManyArguments;
	if (inName==HX_("UnknownArgument",07,f0,df,4b)) return UnknownArgument_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String DispatchError_obj_sStaticFields[] = {
	HX_("UnknownArgument",07,f0,df,4b),
	HX_("ArgumentFormatError",74,0d,5d,43),
	HX_("DecoderNotFound",b3,e7,c4,6e),
	HX_("MissingOptionArgument",f8,64,95,d6),
	HX_("MissingArgument",e3,c7,f2,c0),
	HX_("TooManyArguments",a3,0f,ac,15),
	::String(null())
};

static void DispatchError_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DispatchError_obj::MissingArgument,"MissingArgument");
	HX_MARK_MEMBER_NAME(DispatchError_obj::TooManyArguments,"TooManyArguments");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DispatchError_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DispatchError_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DispatchError_obj::MissingArgument,"MissingArgument");
	HX_VISIT_MEMBER_NAME(DispatchError_obj::TooManyArguments,"TooManyArguments");
};
#endif

hx::Class DispatchError_obj::__mClass;

Dynamic __Create_DispatchError_obj() { return new DispatchError_obj; }

void DispatchError_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("mcli.DispatchError","\x33","\xe0","\x3b","\xa3"), hx::TCanCast< DispatchError_obj >,DispatchError_obj_sStaticFields,0,
	&__Create_DispatchError_obj, &__Create,
	&super::__SGetClass(), &CreateDispatchError_obj, DispatchError_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , DispatchError_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &DispatchError_obj::__GetStatic;
}

void DispatchError_obj::__boot()
{
MissingArgument = hx::CreateEnum< DispatchError_obj >(HX_HCSTRING("MissingArgument","\xe3","\xc7","\xf2","\xc0"),4,0);
TooManyArguments = hx::CreateEnum< DispatchError_obj >(HX_HCSTRING("TooManyArguments","\xa3","\x0f","\xac","\x15"),5,0);
}


} // end namespace mcli
