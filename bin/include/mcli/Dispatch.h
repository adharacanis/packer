// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_mcli_Dispatch
#define INCLUDED_mcli_Dispatch

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(mcli,CommandLine)
HX_DECLARE_CLASS1(mcli,Dispatch)

namespace mcli{


class HXCPP_CLASS_ATTRIBUTES Dispatch_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Dispatch_obj OBJ_;
		Dispatch_obj();

	public:
		enum { _hx_ClassId = 0x2d749175 };

		void __construct(::Array< ::String > args);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mcli.Dispatch")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mcli.Dispatch"); }
		static hx::ObjectPtr< Dispatch_obj > __new(::Array< ::String > args);
		static hx::ObjectPtr< Dispatch_obj > __alloc(hx::Ctx *_hx_ctx,::Array< ::String > args);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Dispatch_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Dispatch","\xda","\x8a","\x15","\xf8"); }

		static ::String argToString( ::Dynamic arg,hx::Null< int >  argSize, ::Dynamic screenSize);
		static ::Dynamic argToString_dyn();

		static ::String showUsageOf(::Array< ::Dynamic> args, ::Dynamic screenSize);
		static ::Dynamic showUsageOf_dyn();

		static  ::Dynamic getScreenSize(hx::Null< int >  defaultSize);
		static ::Dynamic getScreenSize_dyn();

		static ::Array< ::String > getAliases( ::Dynamic arg);
		static ::Dynamic getAliases_dyn();

		static ::String getPostfix( ::Dynamic arg);
		static ::Dynamic getPostfix_dyn();

		static  ::haxe::ds::StringMap decoders;
		static void addDecoderRuntime(::String name, ::Dynamic d);
		static ::Dynamic addDecoderRuntime_dyn();

		static  ::Dynamic decode(::String a,::String type);
		static ::Dynamic decode_dyn();

		static bool isArgument(::String str);
		static ::Dynamic isArgument_dyn();

		::Array< ::String > args;
		int depth;
		void errln(::String s);
		::Dynamic errln_dyn();

		void println(::String s);
		::Dynamic println_dyn();

		void dispatch( ::mcli::CommandLine v,hx::Null< bool >  handleExceptions);
		::Dynamic dispatch_dyn();

		void _dispatch( ::mcli::CommandLine v,bool handleExceptions);
		::Dynamic _dispatch_dyn();

};

} // end namespace mcli

#endif /* INCLUDED_mcli_Dispatch */ 
