// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_mcli_CommandLine
#define INCLUDED_mcli_CommandLine

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(mcli,CommandLine)

namespace mcli{


class HXCPP_CLASS_ATTRIBUTES CommandLine_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef CommandLine_obj OBJ_;
		CommandLine_obj();

	public:
		enum { _hx_ClassId = 0x27f9cbe8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="mcli.CommandLine")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"mcli.CommandLine"); }
		static hx::ObjectPtr< CommandLine_obj > __new();
		static hx::ObjectPtr< CommandLine_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CommandLine_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("CommandLine","\xbf","\x4e","\x46","\xc9"); }

		bool _preventDefault;
		virtual ::Array< ::Dynamic> getArguments();
		::Dynamic getArguments_dyn();

		void preventDefault();
		::Dynamic preventDefault_dyn();

		::String showUsage();
		::Dynamic showUsage_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace mcli

#endif /* INCLUDED_mcli_CommandLine */ 
