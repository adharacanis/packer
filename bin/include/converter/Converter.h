// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_converter_Converter
#define INCLUDED_converter_Converter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_c32ce6338dcac924_11_new)
HX_DECLARE_CLASS1(converter,Converter)

namespace converter{


class HXCPP_CLASS_ATTRIBUTES Converter_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Converter_obj OBJ_;
		Converter_obj();

	public:
		enum { _hx_ClassId = 0x4284a920 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="converter.Converter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"converter.Converter"); }

		hx::ObjectPtr< Converter_obj > __new() {
			hx::ObjectPtr< Converter_obj > __this = new Converter_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Converter_obj > __alloc(hx::Ctx *_hx_ctx) {
			Converter_obj *__this = (Converter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Converter_obj), false, "converter.Converter"));
			*(void **)__this = Converter_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_c32ce6338dcac924_11_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Converter_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Converter","\x00","\xd9","\x8e","\x81"); }

		static void __boot();
		static int MAX_8;
		static int MAX_4;
		static  ::Dynamic convertTo4444( ::Dynamic data);
		static ::Dynamic convertTo4444_dyn();

};

} // end namespace converter

#endif /* INCLUDED_converter_Converter */ 
