// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_FileSystem
#define INCLUDED_FileSystem

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_5c1cac14ee3501d0_11_new)
HX_DECLARE_CLASS0(FileSystem)



class HXCPP_CLASS_ATTRIBUTES FileSystem_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FileSystem_obj OBJ_;
		FileSystem_obj();

	public:
		enum { _hx_ClassId = 0x20f9c80f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="FileSystem")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"FileSystem"); }

		hx::ObjectPtr< FileSystem_obj > __new() {
			hx::ObjectPtr< FileSystem_obj > __this = new FileSystem_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< FileSystem_obj > __alloc(hx::Ctx *_hx_ctx) {
			FileSystem_obj *__this = (FileSystem_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FileSystem_obj), false, "FileSystem"));
			*(void **)__this = FileSystem_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_5c1cac14ee3501d0_11_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FileSystem_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FileSystem","\xab","\xe2","\x17","\xca"); }

		static  ::Dynamic readPNG(::String path);
		static ::Dynamic readPNG_dyn();

		static void readPPX(::String path);
		static ::Dynamic readPPX_dyn();

		static void savePPX(::String path, ::Dynamic data);
		static ::Dynamic savePPX_dyn();

		static void addPPXHeader( ::Dynamic imageData);
		static ::Dynamic addPPXHeader_dyn();

};


#endif /* INCLUDED_FileSystem */ 
